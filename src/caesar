#!/bin/bash

# ======================================================================
# Main caesar script.
# ======================================================================
function main {
  # Get the location of this script.
  # Lets caesar and .caesar be called without necessarily being on path.
  source_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  
  # Get the current working directory, so absolute paths can be made.
  cwd="$( pwd )"
  
  # Get the terminal width, to allow output formatting.
  terminal_width="$( tput cols )"
  
  # Split iput arguments into first argument, arg, and everything else, args
  arg=$1
  args=($@)
  args=${args[@]:1:$(($#-1))}
  
  if [ "$arg" = "run_harmonic" ]; then
    run_harmonic $source_dir $args
  elif [  "$arg" = "run_quadratic" ]; then
    run_quadratic $source_dir $args
  elif [  "$arg" = "clear_all" ]; then
    clear_all $source_dir $args
  elif [  "$arg" = "calculate_symmetry" ]; then
    calculate_symmetry $source_dir $args
  else
    # Anything not handled by this script is passed to .caesar
    $source_dir/.caesar $source_dir $cwd $terminal_width $@
  fi
}

# ======================================================================
# Script to run harmonic calculation on TCM cluster.
# ======================================================================
# Can also be used to copy the results of previous harmonic runs.
# This should only be used for unit testing.
function run_harmonic {
  # Read in user inputs.
  echo "What is the first supercell to run?"
  read first_sc
  echo "What is the last supercell to run?"
  read last_sc
  echo "How many cores per run?"
  read num_cores

  # Read code and seedname
  code=$( awk 'NR==1 {print}' user_input.txt )
  seedname=$( awk 'NR==2 {print}' user_input.txt )

  # Loop over supercells
  for i in `seq $first_sc $last_sc`; do
    sdir=Supercell_$i 

    # Loop over atoms to be displaced.
    j=0
    while read fline; do
      line=($fline)
      atom=${line[0]}
      xy_symmetry=${line[1]}
      xz_symmetry=${line[2]}
      yz_symmetry=${line[3]}
      directions=('x')
      if [ "$xy_symmetry" = "0" ]; then
        directions+=' y'
      fi
      if [ "$xz_symmetry" = "0" ] && [ "$yz_symmetry" = "0" ]; then
        directions+=' z'
      fi
      for direction in ${directions[@]}; do
        signs=(+ -)
        for sign in ${signs[@]}; do
          dir=$sdir/atom.$atom.${sign}d$direction
          echo "Working in directory:"
          echo $dir
          run_dft $code $ddir $num_cores $seedname
        done
      done
    done < $sdir/unique_directions.dat 
  done
  echo "Done."
}

# ======================================================================
# Script to run quadratic calculation on TCM cluster.
# ======================================================================
function run_quadratic {
  # Read in user inputs
  echo "What is the first supercell to run?"
  read first_sc
  echo "What is the last supercell to run?"
  read last_sc
  echo "How many cores per run?"
  read num_cores

  # Read in previous user inputs
  dft_code=$( awk 'NR==1 {print}' user_input.txt )
  seedname=$( awk 'NR==2 {print}' user_input.txt )
  harmonic_path=$( awk 'NR==3 {print}' user_input.txt)

  # Read in mapping file
  sampling_amplitude=$( awk 'NR==1 {print $1}' mapping.dat)
  sampling_point_init=$( awk 'NR==2 {print $1}' mapping.dat)
  sampling_point_final=$( awk 'NR==2 {print $2}' mapping.dat)
  no_sampling_points=$(( $sampling_point_final-$sampling_point_init ))

  # Read in structure file
  atoms_line=$(awk -v IGNORECASE=1 '$1~/Atoms/{print NR}' \
     $harmonic_path/structure.dat)
  symmetry_line=$(awk -v IGNORECASE=1 '$1~/Lattice/{print NR}' \
     $harmonic_path/structure.dat)
  no_atoms=$($symmetry_line-$atoms_line-1)
  no_modes=$(( $no_atoms*3 ))

  # Loop over supercells
  for sc_id in `seq $first_sc $last_sc`; do
    sdir=Supercell_$sc_id

    # Run static dft
    static_dir=$sdir/static
    echo $static_dir
    run_dft $dft_code $static_dir $num_cores $seedname
  done

  # loop over kpoints
  while read fline ; do
    line=($fline)
    kpoint=${line[0]}
    sc_id=${line[2]}
    
    # Skip kpoints in other supercells
    if ["$sc_id" -ge "$first_sc"] && ["$sc_id" -le "$last_sc"]; then
      # Loop over modes
      for j in `seq 1 $no_modes`; do
        # Loop over sampling points
        for k in `seq $sampling_point_init $sampling_point_final`; do
          mdir=kpoint_$kpoint/mode_$j/amplitude_$k
          # Check that dft needs to be run
          if [ -e "$mdir/structure.dat" ]; then
            # Run dft
            echo $mdir
            run_dft $dft_code $mdir $num_cores $seedname
          fi
        done
      done
    fi
  done < $harmonic_path/list.dat
  echo "Done."
}

# ======================================================================
# Script to clear up after harmonic calculations.
# ======================================================================
function clear_all {
  echo "Are you sure (y/n)?"
  read answer

  if [ "$answer" = "y" ]; then
    rm -r Supercell_* ibz.dat no_sc.dat
  fi
}

# ======================================================================
# Script to run dft
# ======================================================================
function run_dft {
  dft_code=$1
  directory=$2
  num_cores=$3
  seedname=$4
  
  cd $directory
  
  if [ "$dft_code" = "castep" ]; then
    cp $dft_code/$seedname.param .
    rundft nnodes $num_cores seedname $seedname
    rm *.castep_bin *.cst_esp *.usp machine_file *.bib *orbitals
  elif [ "$dft_code" = "vasp" ]; then
    # vasp run script not yet written
    echo "Error! vasp run script not yet written."
    exit
  elif [ "$dft_code" = "qe" ]; then
    mpirun -np $num_cores /rscratch/bm418/espresso-5.1.1/bin/pw.x \
       -i $seedname.in > $seedname.out
    rm -r $seedname.save
  fi
  
  cd -
}

# ======================================================================
# Script to add symmetry data to structure file
# ======================================================================
function calculate_symmetry {
  # Takes a structure.dat file with no symmetry, and appends symmetry operators

  # $1=structure.dat

  # Input:

  # Lattice
  #  ~ ~ ~
  #  ~ ~ ~
  #  ~ ~ ~
  # Atoms
  #  ~ ~ ~
  #   ...
  #  ~ ~ ~
  # End

  # Output:

  # Lattice
  #  ~ ~ ~
  #  ~ ~ ~
  #  ~ ~ ~
  # Atoms
  #  ~ ~ ~
  #   ...
  #  ~ ~ ~
  # Symmetry
  #  ~ ~ ~
  #   ...
  #  ~ ~ ~
  # End
  
  dir=$1
  structure_file=$2
  
  # Create a .cell file from the structure file
  $dir/caesar structure_to_dft castep $structure_file $structure_file.cell
  
  # Use cellsym to calculate symmetries from the .cell file
  cellsym --symmetry $structure_file.cell > $structure_file.dat
  
  # Add symmetries to the structure file
  $dir/caesar calculate_symmetry_helper $structure_file.dat $structure_file
  
  # Clean up temporary files
  rm $structure_file.cell
  rm $structure_file.dat
}

main $@
