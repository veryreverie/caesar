#!/bin/bash

# ======================================================================
# Main caesar script.
# ======================================================================
function main {
  if [ "$1" = "run_harmonic" ]; then
    run_harmonic
  elif [  "$1" = "run_quadratic" ]; then
    run_quadratic
  elif [  "$1" = "clear_all" ]; then
    clear_all
  elif [  "$1" = "calculate_symmetry" ]; then
    calculate_symmetry
  else
    # Anything not handled by this script is passed to .caesar
    
    # Get the location of this script
    # Lets .caesar be called without necessarily being on path
    dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    
    # Call .caesar
    $dir/.caesar $@
  fi
}

# ======================================================================
# Script to run harmonic calculation on TCM cluster.
# ======================================================================
function run_harmonic {
  # Read in user inputs
  echo "What is the first supercell to run?"
  read first_sc
  echo "What is the last supercell to run?"
  read last_sc
  echo "How many cores per run?"
  read num_cores

  # Read code and seedname
  code=$( awk '{print}' code.txt )
  seedname=$( awk '{print}' seedname.txt )

  # Loop over supercells
  for i in `seq $first_sc $last_sc`;
  do
    sdir=Supercell_$i 

    # Loop over force constants
    while read fline ; do
      line=($fline)
      atom=${line[0]}
      disp=${line[1]}
      
      paths=(positive negative)
      for path in ${paths[@]}; do
        ddir=$sdir/atom.$atom.disp.$disp/$path
        if [ "$code" = "castep" ]; then
          cp $code/$seedname.param $ddir
        fi
        run_dft $code $ddir $num_cores $seedname
      done

    done < $sdir/force_constants.dat 

  done
  echo "Done."
}

# ======================================================================
# Script to run quadratic calculation on TCM cluster.
# ======================================================================
function run_quadratic {
  # Read in user inputs
  echo "What is the first supercell to run?"
  read first_sc
  echo "What is the last supercell to run?"
  read last_sc
  echo "How many cores per run?"
  read num_cores

  # Read in previous user inputs
  dft_code=$( awk 'NR==1 {print}' user_input.txt )
  seedname=$( awk 'NR==2 {print}' user_input.txt )
  seedname_nscf=$seedname.nscf
  harmonic_path=$( awk 'NR==3 {print}' user_input.txt)

  # Read in mapping file
  sampling_amplitude=$( awk 'NR==1 {print $1}' mapping.dat)
  sampling_point_init=$( awk 'NR==2 {print $1}' mapping.dat)
  sampling_point_final=$( awk 'NR==2 {print $2}' mapping.dat)
  no_sampling_points=$(( $sampling_point_final-$sampling_point_init ))

  # Read in structure file
  atoms_line=$(awk -v IGNORECASE=1 '$1~/Atoms/{print NR}' \
     $harmonic_path/structure.dat)
  symmetry_line=$(awk -v IGNORECASE=1 '$1~/Lattice/{print NR}' \
     $harmonic_path/structure.dat)
  no_atoms=$($symmetry_line-$atoms_line-1)
  no_modes=$(( $no_atoms*3 ))

  # Loop over supercells
  for sc_id in `seq $first_sc $last_sc`; do
    sdir=Supercell_$sc_id

    # Run static dft
    static_dir=$sdir/static
    if [ "$dft_code" = "castep" ]; then
      cp $dft_code/$seedname.param $static_dir
      run_dft $dft_code $static_dir $num_cores $seedname
    elif [ "$dft_code" = "qe" ]; then
      run_dft $dft_code $static_dir $num_cores $seedname
      if [ -e "$static_dir/$seedname_nscf.in" ]; then
        run_dft $dft_code $static_dir $num_cores $seedname_nscf
      fi
    fi
  done

  # loop over kpoints
  while read fline ; do
    line=($fline)
    kpoint=${line[0]}
    sc_id=${line[2]}
    kdir=kpoint.$kpoint
    
    # Skip kpoints in other supercells
    if ["$sc_id" -ge "$first_sc"] && ["$sc_id" -le "$last_sc"]; then
      # Loop over modes
      for j in `seq 1 $no_modes`; do
        # Loop over sampling points
        for k in `seq $sampling_point_init $sampling_point_final`; do
          mdir=$kdir/mode.$j.$k
          # Check that dft needs to be run
          if [ -e "$mdir/structure.dat" ]; then
            # Run dft
            if [ "$dft_code" = "castep" ]; then
              cp $dft_code/$seedname.param $mdir
              run_dft $dft_code $mdir $num_cores $seedname
            elif [ "$dft_code" = "qe" ]; then
              run_dft $dft_code $mdir $num_cores $seedname
              if [ -e "$mdir/$seedname_nscf.in" ]; then
                run_dft $dft_code $mdir $num_cores $seedname_nscf
              fi
            fi
          fi
        done
      done
    fi
  done < $harmonic_path/list.dat
  echo "Done."
}

# ======================================================================
# Script to clear up after harmonic calculations.
# ======================================================================
function clear_all {
  echo "Are you sure (y/n)?"
  read answer

  if [ $answer == 'y' ]; then
    rm -r Supercell_* ibz.dat no_sc.dat
  fi
}

# ======================================================================
# Script to run dft
# ======================================================================
function run_dft {
  dft_code=$1
  directory=$2
  num_cores=$3
  seedname=$4
  
  cd $directory
  
  if [ "$dft_code" = "castep" ]; then
    rundft nnodes $num_cores seedname $seedname
    rm *.castep_bin *.cst_esp *.usp machine_file *.bib *orbitals
  elif [ "$dft_code" = "vasp" ]; then
    # vasp run script not yet written
    echo "Error! vasp run script not yet written."
    exit
  elif [ "$dft_code" = "qe" ]; then
    mpirun -np $num_cores /rscratch/bm418/espresso-5.1.1/bin/pw.x \
       -i $seedname.in > $seedname.out
    rm -r $seedname.save
  fi
  
  cd -
}

# ======================================================================
# Script to add symmetry data to structure file
# ======================================================================
function calculate_symmetry {
  # Takes a structure.dat file with no symmetry, and appends symmetry operators

  # $1=structure.dat

  # Input:

  # Lattice
  #  ~ ~ ~
  #  ~ ~ ~
  #  ~ ~ ~
  # Atoms
  #  ~ ~ ~
  #   ...
  #  ~ ~ ~
  # End

  # Output:

  # Lattice
  #  ~ ~ ~
  #  ~ ~ ~
  #  ~ ~ ~
  # Atoms
  #  ~ ~ ~
  #   ...
  #  ~ ~ ~
  # Symmetry
  #  ~ ~ ~
  #   ...
  #  ~ ~ ~
  # End
  
  structure_file=$1
  
  # Create a .cell file from the structure file
  caesar structure_to_dft castep $structure_file calculate_symmetry.cell
  
  # Use cellsym to calculate symmetries from the .cell file
  cellsym --symmetry calculate_symmetry.cell > calculate_symmetry.dat
  
  # Add symmetries to the structure file
  caesar calculate_symmetry_helper calculate_symmetry.dat $structure_file
  
  # Clean up temporary files
  rm calculate_symmetry.cell
  rm calculate_symmetry.dat
}

main $@
