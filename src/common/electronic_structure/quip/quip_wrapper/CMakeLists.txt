cmake_minimum_required (VERSION 3.5 FATAL_ERROR)
include(${CMAKE_SOURCE_DIR}/utils/cmake_include_guard.cmake)
cmake_include_guard(quip_wrapper)

if (DEFINED LINK_TO_QUIP AND LINK_TO_QUIP)
  add_library(quip_wrapper quip_wrapper.f90)
else ()
  add_library(quip_wrapper quip_dummy.f90)
endif ()

# Link to QUIP, if LINK_TO_QUIP is set.
if (DEFINED LINK_TO_QUIP AND LINK_TO_QUIP)
  find_library(QUIP_LIBRARY NAMES quip PATHS "lib" "lib32" "lib64")
  if (QUIP_LIBRARY)
    MESSAGE(STATUS "Found Quip library: ${QUIP_LIBRARY}")
  else()
    MESSAGE(FATAL_ERROR "libquip not found. Please ensure that this is on LIB.")
  endif()
  target_link_libraries(quip_wrapper ${QUIP_LIBRARY})
  
  find_library(ATOMS_LIBRARY NAMES atoms PATHS "lib" "lib32" "lib64")
  if (ATOMS_LIBRARY)
    MESSAGE(STATUS "Found Quip atoms library: ${ATOMS_LIBRARY}")
  else()
    MESSAGE(FATAL_ERROR "libatoms not found. Please ensure that this is on LIB.")
  endif()
  target_link_libraries(quip_wrapper ${ATOMS_LIBRARY})
  
  find_path(QUIP_INCLUDE_PATH quip_unified_wrapper_module.mod PATH "path")
  if (QUIP_INCLUDE_PATH)
    MESSAGE(STATUS "Found Quip unified wrapper: ${QUIP_INCLUDE_PATH}")
  else()
    MESSAGE(FATAL_ERROR "quip_unified_wrapper_module.mod not found. Please ensure that this is on PATH.")
  endif()
  target_include_directories(quip_wrapper PRIVATE ${QUIP_INCLUDE_PATH})
endif()
