module string_readable_test
  use funit
  
  use caesar_foundations_module
  use caesar_io_module
  implicit none
  
  type, extends(StringReadable) :: TestType
    real(dp) :: contents
  contains
    procedure, public :: read => read_TestType
  end type
  
  interface TestType
    module procedure new_TestType
    module procedure new_TestType_String
  end interface
contains

function new_TestType(contents) result(this)
  real(dp), intent(in) :: contents
  type(TestType)       :: this
  
  this%contents = contents
end function

subroutine read_TestType(this,input)
  class(TestType), intent(out) :: this
  type(String),    intent(in)  :: input
  
  ! Select type needed to call non-polymorphic procedures,
  !    such as the TestType(input) constructor.
  select type(this); type is(TestType)
    this = TestType(dble(input))
  class default
    call print_line(CODE_ERROR//': Called the TestType implementation &
       &of read() from a type other than TestType.')
    call err()
  end select
end subroutine

impure elemental function new_TestType_String(input) result(this)
  type(String), intent(in) :: input
  type(TestType)           :: this
  
  call this%read(input)
end function

@test
subroutine test_StringReadable()
  type(TestType) :: foo
  
  foo = TestType(3.0_dp)
  @assertTrue(abs(foo%contents-3.0_dp)<1e-10_dp)
  
  call foo%read(str('5.0'))
  @assertTrue(abs(foo%contents-5.0_dp)<1e-10_dp)
  
  foo = TestType(str('7.0'))
  @assertTrue(abs(foo%contents-7.0_dp)<1e-10_dp)
end subroutine
end module
