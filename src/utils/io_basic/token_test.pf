module token_test
  use funit
  
  use caesar_string_module
  use caesar_print_module
  use caesar_token_module
  implicit none
contains

@test
subroutine test_token()
  type(String) :: foo
  
  foo = 'Hello, World!'
  
  @assertTrue(token('Hello, World!',1)=='Hello,')
  @assertTrue(token('Hello, World!',2)=='World!')
  @assertTrue(token('Hello, World!',1,delimiter=',')=='Hello')
  @assertTrue(token('Hello, World!',2,delimiter=',')==' World!')
  @assertTrue(token('Hello, World!',1,delimiters=[' ',','])=='Hello')
  @assertTrue(token('Hello, World!',2,delimiters=[' ',','])=='World!')
  @assertTrue(token(foo,1)=='Hello,')
  @assertTrue(token(foo,2)=='World!')
  @assertTrue(token(foo,1,delimiter=',')=='Hello')
  @assertTrue(token(foo,2,delimiter=',')==' World!')
  @assertTrue(token(foo,1,delimiters=[' ','o'])=='Hell')
  @assertTrue(token(foo,2,delimiters=[' ','o'])==',')
  @assertTrue(token(foo,3,delimiters=[' ','o'])=='W')
  @assertTrue(token(foo,4,delimiters=[' ','o'])=='rld!')
end subroutine

@test
subroutine test_tokens()
  type(String), allocatable :: foo(:)
  
  foo = tokens('Hello, World!')
  @assertTrue(size(foo)==2)
  @assertTrue(all(foo==[str('Hello,'),str('World!')]))
  
  foo = tokens('Hello, World!', delimiter=',')
  @assertTrue(size(foo)==2)
  @assertTrue(all(foo==[str('Hello'),str(' World!')]))
  
  foo = tokens('Hello, World!', delimiters=[' ','o'])
  @assertTrue(size(foo)==4)
  @assertTrue(all(foo==[str('Hell'),str(','),str('W'),str('rld!')]))
  
  foo = tokens('Hello, World!', first=3, delimiters=[' ','o'])
  @assertTrue(size(foo)==2)
  @assertTrue(all(foo==[str('W'),str('rld!')]))
  
  foo = tokens('Hello, World!', last=2, delimiters=[' ','o'])
  @assertTrue(size(foo)==2)
  @assertTrue(all(foo==[str('Hell'),str(',')]))
  
  foo = tokens('Hello, World!', first=2, last=3, delimiters=[' ','o'])
  @assertTrue(size(foo)==2)
  @assertTrue(all(foo==[str(','),str('W')]))
end subroutine
end module
