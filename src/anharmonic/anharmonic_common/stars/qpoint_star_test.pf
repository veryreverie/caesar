!> Tests for [[QpointStar(type)]].
module qpoint_star_test
  use funit
  
  use caesar_common_module

  use caesar_stars_module
  implicit none
contains

! Tests constructor and getter.
@test
subroutine test_QpointStar()
  type :: TestCase
    type(QpointCombination), allocatable :: input(:)
    type(QpointCombination), allocatable :: output(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(QpointStar)                     :: star
  type(QpointCombination), allocatable :: output(:)
  
  type(String), allocatable :: message(:)
  
  integer :: i
  
  test_cases = [                                                       &
     & TestCase( [ QpointCombination([ QpointPower:: ]) ],             &
     &           [ QpointCombination([ QpointPower:: ]) ]  ),          &
     & TestCase( [ QpointCombination([ QpointPower(1,2,3,4) ]) ],      &
     &           [ QpointCombination([ QpointPower(1,2,3,4) ]) ]  ),   &
     & TestCase( [ QpointCombination([ QpointPower(1,2,3,4),           &
     &                                 QpointPower(5,6,7,8)  ])  ],    &
     &           [ QpointCombination([ QpointPower(1,2,3,4),           &
     &                                 QpointPower(5,6,7,8)  ])  ]  ), &
     & TestCase( [ QpointCombination([ QpointPower(1,2,3,4) ]),        &
     &             QpointCombination([ QpointPower(5,6,7,8) ])  ],     &
     &           [ QpointCombination([ QpointPower(1,2,3,4) ]),        &
     &             QpointCombination([ QpointPower(5,6,7,8) ])  ] ),   &
     & TestCase( [ QpointCombination([ QpointPower(5,6,7,8) ]),        &
     &             QpointCombination([ QpointPower(1,2,3,4) ])  ],     &
     &           [ QpointCombination([ QpointPower(1,2,3,4) ]),        &
     &             QpointCombination([ QpointPower(5,6,7,8) ])  ] ),   &
     & TestCase( [ QpointCombination([ QpointPower(1,2,3,4),           &
     &                                 QpointPower(5,6,7,8)  ]),       &
     &             QpointCombination([ QpointPower(1,2,3,4),           &
     &                                 QpointPower(5,5,7,8)  ])  ],    &
     &           [ QpointCombination([ QpointPower(1,2,3,4),           &
     &                                 QpointPower(5,5,7,8)  ]),       &
     &             QpointCombination([ QpointPower(1,2,3,4),           &
     &                                 QpointPower(5,6,7,8)  ])  ]  ), &
     & TestCase( [ QpointCombination([ QpointPower(1,2,3,4),           &
     &                                 QpointPower(5,6,7,8)  ]),       &
     &             QpointCombination([ QpointPower(1,2,3,4),           &
     &                                 QpointPower(5,6,7,7)  ])  ],    &
     &           [ QpointCombination([ QpointPower(1,2,3,4),           &
     &                                 QpointPower(5,6,7,7)  ]),       &
     &             QpointCombination([ QpointPower(1,2,3,4),           &
     &                                 QpointPower(5,6,7,8)  ])  ]  )  ]
  
  do i=1,size(test_cases)
    associate( input    => test_cases(i)%input, &
             & expected => test_cases(i)%output )
      star = QpointStar(input)
      output = star%combinations()
      
      message = [ str('Input:'),    &
                & str(input),       &
                & str('Output:'),   &
                & str(output),      &
                & str('Expected:'), &
                & str(expected)     ]
      
      @assertTrue(size(output)==size(expected), char(message))
      @assertTrue(all(output==expected), char(message))
    end associate
  enddo
end subroutine

@test
subroutine test_total_power()
  type(QpointStar) :: foo
  
  foo = QpointStar([str('()')])
  @assertTrue(foo%total_power()==0)
  
  foo = QpointStar([str('(q1^2)'), str('(q2^2)')])
  @assertTrue(foo%total_power()==2)
end subroutine

@test
subroutine test_comparison()
  type :: TestCase
    type(QpointCombination), allocatable :: combinations(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(String), allocatable :: message(:)
  logical                   :: check
  
  integer :: i,j
  
  test_cases = [                                                        &
     & TestCase([ QpointCombination(str('()')) ]),                      &
     & TestCase([ QpointCombination(str('(q1^2)')) ]),                  &
     & TestCase([ QpointCombination(str('(q1^3)')) ]),                  &
     & TestCase([ QpointCombination(str('(q2^2*q3^4)')) ]),             &
     & TestCase([ QpointCombination(str('(q2^5*q3^4)')) ]),             &
     & TestCase([ QpointCombination(str('(q2^2*q3^5)')) ]),             &
     & TestCase([ QpointCombination(str('(q1^2)*(q2^6*q3^8)')) ]),      &
     & TestCase([ QpointCombination(str('(q2^2*q3^4)*(q4^6*q5^9)')) ]), &
     & TestCase([ QpointCombination(str('(q1^2)')),                     &
     &            QpointCombination(str('(q2^2*q3^4)'))  ]),            &
     & TestCase([ QpointCombination(str('(q1^2)')),                     &
     &            QpointCombination(str('(q2^2*q3^5)'))  ])             ]
  do i=1,size(test_cases)
    do j=1,size(test_cases)
      associate( lhs=>test_cases(i)%combinations, &
               & rhs=>test_cases(j)%combinations  )
        message = [ str('lhs:'), &
                  & str(lhs),    &
                  & str('rhs:'), &
                  & str(rhs)     ]
        check  = QpointStar(lhs)==QpointStar(rhs) &
         & .eqv. i==j
        @assertTrue(check, char(message))
        check  = QpointStar(lhs)/=QpointStar(rhs) &
         & .eqv. i/=j
        @assertTrue(check, char(message))
      end associate
    enddo
  enddo
end subroutine

@test
subroutine test_io()
  type :: TestCase
    type(QpointStar)          :: star
    type(String), allocatable :: lines(:)
  end type
  
  type(QpointCombination), allocatable :: combinations(:)
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(QpointStar)          :: new_star
  type(String), allocatable :: new_lines(:)
  
  integer :: i
  
  combinations = [ QpointCombination(str('()')),                     &
                 & QpointCombination(str('(q1^2)')),                 &
                 & QpointCombination(str('(q1^2*q3^4)*(q5^6*q7^8)')) ]
  
  test_cases = [ TestCase( QpointStar(combinations([1])),         &
               &           str(combinations([1]))         ),      &
               & TestCase( QpointStar(combinations([2])),         &
               &           str(combinations([2]))         ),      &
               & TestCase( QpointStar(combinations([3])),         &
               &           str(combinations([3]))         ),      &
               & TestCase( QpointStar([combinations([1,2,3])]),   &
               &           str([combinations([1,2,3])])         ) ]
  
  do i=1,size(test_cases)
    associate( star  => test_cases(i)%star, &
             & lines => test_cases(i)%lines )
      new_lines = str(star)
      @assertTrue(size(new_lines)==size(lines), char(lines))
      @assertTrue(all(new_lines==lines), char(lines))
      
      new_star = QpointStar(lines)
      @assertTrue(new_star==star, char(lines))
    end associate
  enddo
end subroutine

@test
subroutine test_combinations_to_stars()
  type :: TestCase
    type(QpointCombination), allocatable :: combinations(:)
    type(Group),             allocatable :: qpoint_groups(:)
    type(QpointStar),        allocatable :: output(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(QpointStar), allocatable :: stars(:)
  
  type(String), allocatable :: message(:)
  
  integer :: i
  
  test_cases = [                                                        &
     & TestCase(                                                        &
     &    combinations  = [ QpointCombination(str('()')) ],             &
     &    qpoint_groups = [ Group:: ],                                  &
     &    output        = [ QpointStar([ str('()') ]) ]                 &
     & ),                                                               &
     & TestCase(                                                        &
     &    combinations  = [ QpointCombination(str('()')) ],             &
     &    qpoint_groups = [ Group([1]) ],                               &
     &    output        = [ QpointStar([ str('()') ]) ]                 &
     & ),                                                               &
     & TestCase(                                                        &
     &    combinations  = [ QpointCombination:: ],                      &
     &    qpoint_groups = [ Group:: ],                                  &
     &    output        = [ QpointStar:: ]                              &
     & ),                                                               &
     & TestCase(                                                        &
     &    combinations  = [ QpointCombination:: ],                      &
     &    qpoint_groups = [ Group([1]) ],                               &
     &    output        = [ QpointStar:: ]                              &
     & ),                                                               &
     & TestCase(                                                        &
     &    combinations  = [ QpointCombination(str('(q1^1)')),           &
     &                      QpointCombination(str('(q2^1)'))  ],        &
     &    qpoint_groups = [ Group:: ],                                  &
     &    output        = [ QpointStar([ str('(q1^1)') ]),              &
     &                      QpointStar([ str('(q2^1)') ])  ]            &
     & ),                                                               &
     & TestCase(                                                        &
     &    combinations  = [ QpointCombination(str('(q1^1)')),           &
     &                      QpointCombination(str('(q2^1)'))  ],        &
     &    qpoint_groups = [ Group([1,2]),                               &
     &                      Group([2,1])  ],                            &
     &    output        = [ QpointStar([ str('(q1^1)'),                 &
     &                                   str('(q2^1)')  ]) ]            &
     & ),                                                               &
     & TestCase(                                                        &
     &    combinations  = [ QpointCombination(str('(q1^2)')),           &
     &                      QpointCombination(str('(q1^1)*(q2^1)')),    &
     &                      QpointCombination(str('(q2^2)'))         ], &
     &    qpoint_groups = [ Group([1,2]),                               &
     &                      Group([2,1])  ],                            &
     &    output        =  [ QpointStar([ str('(q1^2)'),                &
     &                                    str('(q2^2)')  ]),            &
     &                       QpointStar([ str('(q1^1)*(q2^1)') ]) ]     &
     & )                                                                ]
  
  do i=1,size(test_cases)
    associate( combinations   => test_cases(i)%combinations,  &
             & qpoint_groups  => test_cases(i)%qpoint_groups, &
             & expected_stars => test_cases(i)%output         )
      stars = combinations_to_stars(combinations, qpoint_groups)
      
      message = [ str('combinations:'),                   &
                & str(combinations),                      &
                & str('qpoint_groups:'),                  &
                & str(qpoint_groups),                     &
                & str('stars:'),                          &
                & str(stars, separating_line=''),         &
                & str('expected stars:'),                 &
                & str(expected_stars, separating_line='') ]
      
      @assertTrue(size(stars)==size(expected_stars), char(message))
      @assertTrue(all(stars==expected_stars), char(message))
    end associate
  enddo
end subroutine
end module
