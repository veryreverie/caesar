module qpoint_power_test
  use funit

  use caesar_common_module

  use caesar_stars_module
  implicit none
contains

! Tests constructor and getters.
@test
subroutine test_QpointPower()
  type(QpointPower) :: foo
  
  foo = QpointPower(1,2)
  @assertTrue(foo%id()==1)
  @assertTrue(foo%power()==2)
  @assertTrue(foo%paired_id()==1)
  @assertTrue(foo%paired_power()==2)
  
  foo = QpointPower(1,2,1,2)
  @assertTrue(foo%id()==1)
  @assertTrue(foo%power()==2)
  @assertTrue(foo%paired_id()==1)
  @assertTrue(foo%paired_power()==2)
  
  foo = QpointPower(3,4,5,6)
  @assertTrue(foo%id()==3)
  @assertTrue(foo%power()==4)
  @assertTrue(foo%paired_id()==5)
  @assertTrue(foo%paired_power()==6)
  
  foo = QpointPower(3,4,1,2)
  @assertTrue(foo%id()==1)
  @assertTrue(foo%power()==2)
  @assertTrue(foo%paired_id()==3)
  @assertTrue(foo%paired_power()==4)
end subroutine

@test
subroutine test_total_power()
  type(QpointPower) :: foo
  
  foo = QpointPower(1,2)
  @assertTrue(foo%total_power()==2)
  
  foo = QpointPower(1,2,3,4)
  @assertTrue(foo%total_power()==6)
end subroutine

@test
subroutine test_wavevector()
  type :: TestCase
    type(QpointPower)             :: qpoint_power
    type(QpointData), allocatable :: qpoints(:)
    type(FractionVector)          :: wavevector
  end type
  
  type(QpointData), allocatable :: test_qpoints(:)
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(FractionVector) :: wavevector
  
  type(String), allocatable :: message(:)
  
  integer :: i
  
  test_qpoints = [                                               &
     & QpointData( FractionVector(str('   0    0    0')), 1, 1), &
     & QpointData( FractionVector(str(' 1/2    0    0')), 2, 2), &
     & QpointData( FractionVector(str('   0  1/2    0')), 3, 3), &
     & QpointData( FractionVector(str('   0    0  1/2')), 4, 4), &
     & QpointData( FractionVector(str(' 1/4    0    0')), 5, 6), &
     & QpointData( FractionVector(str('-1/4    0    0')), 6, 5), &
     & QpointData( FractionVector(str('   0  1/4    0')), 7, 8), &
     & QpointData( FractionVector(str('   0 -1/4    0')), 8, 7)  ]
  
  test_cases = [                                   &
     & TestCase( QpointPower(str('(q1^1)')),       &
     &           test_qpoints([1]),                &
     &           FractionVector(str('0 0 0')) ),   &
     & TestCase( QpointPower(str('(q4^5)')),       &
     &           test_qpoints([5,2,4,7]),          &
     &           FractionVector(str('0 0 5/2')) ), &
     & TestCase( QpointPower(str('(q7^3*q8^2)')),  &
     &           test_qpoints([5,7,4,2]),          &
     &           FractionVector(str('0 1/4 0')) )  ]
  
  do i=1,size(test_cases)
    associate( qpoint_power        => test_cases(i)%qpoint_power, &
             & qpoints             => test_cases(i)%qpoints,      &
             & expected_wavevector => test_cases(i)%wavevector    )
      wavevector = qpoint_power%wavevector(qpoints)
      
      message = [ str('qpoint_power:'),        &
                & str(qpoint_power),           &
                & str('qpoints:'),             &
                & str(qpoints),                &
                & str('wavevector:'),          &
                & str(wavevector),             &
                & str('expected_wavevector:'), &
                & str(expected_wavevector)     ]
      
      @assertTrue(wavevector==expected_wavevector, char(message))
    end associate
  enddo
end subroutine

@test
subroutine test_complex_monomials()
  type :: MockComplexMode
    integer :: id
    integer :: paired_id
    integer :: qpoint_id
    integer :: paired_qpoint_id
    integer :: subspace_id
  end type
  
  type :: TestCase
    type(QpointPower)                  :: qpoint_power
    type(MockComplexMode), allocatable :: mock_modes(:)
    type(ComplexMonomial), allocatable :: output(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(ComplexMode), allocatable :: modes(:)
  
  type(ComplexMonomial), allocatable :: monomials(:)
  
  type(String), allocatable :: message(:)
  
  logical :: check
  
  integer :: i
  
  test_cases = [                                                          &
     & TestCase( QpointPower(str('(q1^1)')),                              &
     &           [ MockComplexMode:: ],                                   &
     &           [ ComplexMonomial:: ]       ),                           &
     & TestCase( QpointPower(str('(q1^1)')),                              &
     &           [ MockComplexMode(1,1,1,1,1) ],                          &
     &           [ ComplexMonomial(str('1*(u1^1)')) ] ),                  &
     & TestCase( QpointPower(str('(q3^2)')),                              &
     &           [ MockComplexMode(1,1,3,3,1),                            &
     &             MockComplexMode(2,2,3,3,1),                            &
     &             MockComplexMode(3,3,2,2,1),                            &
     &             MockComplexMode(4,4,2,2,1)  ],                         &
     &           [ ComplexMonomial(str('1*(u1^2)')),                      &
     &             ComplexMonomial(str('1*(u1^1)*(u2^1)')),               &
     &             ComplexMonomial(str('1*(u2^2)'))         ] ),          &
     & TestCase( QpointPower(str('(q3^2*q5^1)')),                         &
     &           [ MockComplexMode:: ],                                   &
     &           [ ComplexMonomial:: ]            ),                      &
     & TestCase( QpointPower(str('(q3^2*q5^1)')),                         &
     &           [ MockComplexMode(1,2,3,5,1),                            &
     &             MockComplexMode(2,1,5,3,1)  ],                         &
     &           [ ComplexMonomial(str('1*(u1^2*u2^1)')) ] ),             &
     & TestCase( QpointPower(str('(q3^2*q5^1)')),                         &
     &           [ MockComplexMode(1,2,3,5,1),                            &
     &             MockComplexMode(2,1,5,3,1)  ],                         &
     &           [ ComplexMonomial(str('1*(u1^2*u2^1)')) ] ),             &
     & TestCase( QpointPower(str('(q5^1*q6^2)')),                         &
     &           [ MockComplexMode(4,6,5,6,1),                            &
     &             MockComplexMode(5,7,5,6,1),                            &
     &             MockComplexMode(6,4,6,5,2),                            &
     &             MockComplexMode(7,5,6,5,2),                            &
     &             MockComplexMode(8,9,7,8,3),                            &
     &             MockComplexMode(9,8,8,7,3)  ],                         &
     &           [ ComplexMonomial(str('1*(u4^1*u6^2)')),                 &
     &             ComplexMonomial(str('1*(u4^1*u6^1)*(u5^0*u7^1)')),     &
     &             ComplexMonomial(str('1*(u4^1*u6^0)*(u5^0*u7^2)')),     &
     &             ComplexMonomial(str('1*(u4^0*u6^2)*(u5^1*u7^0)')),     &
     &             ComplexMonomial(str('1*(u4^0*u6^1)*(u5^1*u7^1)')),     &
     &             ComplexMonomial(str('1*(u5^1*u7^2)'))              ] ) ]
  
  do i=1,size(test_cases)
    associate( qpoint_power       => test_cases(i)%qpoint_power, &
             & mock_modes         => test_cases(i)%mock_modes,   &
             & expected_monomials => test_cases(i)%output        )
      modes = mock_to_ComplexMode(mock_modes)
      
      monomials = qpoint_power%complex_monomials(modes)
      
      message = [ str('qpoint_power:'),           &
                & str(qpoint_power),              &
                & str('modes:'),                  &
                & str(modes, separating_line=''), &
                & str('monomials:'),              &
                & str(monomials),                 &
                & str('expected_monomials:'),     &
                & str(expected_monomials)         ]
      
      check = size(monomials)==size(expected_monomials)
      @assertTrue(check, char(message))
      check = all(check_equal(monomials,expected_monomials))
      @assertTrue(check, char(message))
    end associate
  enddo
contains
  ! Convert a MockComplexMode to a ComplexMode.
  impure elemental function mock_to_ComplexMode(input) result(output)
    type(MockComplexMode), intent(in) :: input
    type(ComplexMode)                 :: output
    
    output = ComplexMode( input%id,               &
                        & input%paired_id,        &
                        & 0.0_dp,                 &
                        & 0.0_dp,                 &
                        & .false.,                &
                        & .false.,                &
                        & [ComplexVector::],      &
                        & input%qpoint_id,        &
                        & input%paired_qpoint_id, &
                        & input%subspace_id       )
  end function
  
  ! Check two complex monomials are equal (ignoring the coefficient).
  impure elemental function check_equal(this,that) result(output)
    type(ComplexMonomial), intent(in) :: this
    type(ComplexMonomial), intent(in) :: that
    logical                           :: output
    
    if (size(this)/=size(that)) then
      output = .false.
      return
    else
      output = all(this%ids()==that%ids())               &
       & .and. all(this%paired_ids()==that%paired_ids()) &
       & .and. all(this%powers()==that%powers())         &
       & .and. all(this%paired_powers()==that%paired_powers())
    endif
  end function
end subroutine

@test
subroutine test_io()
  @assertTrue(QpointPower(str('(q1^2)'))==QpointPower(1,2))
  @assertTrue(str(QpointPower(1,2))=='(q1^2)')
  @assertTrue(QpointPower(str('(q1^2*q3^4)'))==QpointPower(1,2,3,4))
  @assertTrue(str(QpointPower(1,2,3,4))=='(q1^2*q3^4)')
end subroutine

@test
subroutine test_comparison()
  type(QpointPower), allocatable :: powers(:)
  
  type(String) :: message(2)
  
  integer :: i,j
  
  ! An array of q-point powers in ascending order.
  powers = [ QpointPower(str('(q1^2)')),      &
           & QpointPower(str('(q1^1)')),      &
           & QpointPower(str('(q2^2*q3^0)')), &
           & QpointPower(str('(q2^1*q3^1)')), &
           & QpointPower(str('(q2^0*q3^2)')), &
           & QpointPower(str('(q2^1*q3^0)')), &
           & QpointPower(str('(q2^0*q3^1)'))  ]
  
  do i=1,size(powers)
    do j=1,size(powers)
      associate( lhs=>powers(i), &
               & rhs=>powers(j)  )
        message = [ 'lhs: '//lhs, &
                  & 'rhs: '//rhs  ]
        if (i<j) then
          @assertFalse(lhs==rhs, char(message))
          @assertTrue(lhs/=rhs, char(message))
          @assertTrue(lhs<rhs, char(message))
          @assertTrue(lhs<=rhs, char(message))
          @assertFalse(lhs>rhs, char(message))
          @assertFalse(lhs>=rhs, char(message))
        elseif (i==j) then
          @assertTrue(lhs==rhs, char(message))
          @assertFalse(lhs/=rhs, char(message))
          @assertFalse(lhs<rhs, char(message))
          @assertTrue(lhs<=rhs, char(message))
          @assertFalse(lhs>rhs, char(message))
          @assertTrue(lhs>=rhs, char(message))
        elseif (i>j) then
          @assertFalse(lhs==rhs, char(message))
          @assertTrue(lhs/=rhs, char(message))
          @assertFalse(lhs<rhs, char(message))
          @assertFalse(lhs<=rhs, char(message))
          @assertTrue(lhs>rhs, char(message))
          @assertTrue(lhs>=rhs, char(message))
        endif
      end associate
    enddo
  enddo
end subroutine

@test
subroutine test_conjg()
  logical :: check
  
  check = conjg(QpointPower(str('(q1^2)'))) &
     & == QpointPower(str('(q1^2'))
  @assertTrue(check)
  
  check = conjg(QpointPower(str('(q1^2*q2^2)'))) &
     & ==QpointPower(str('(q1^2*q2^2)'))
  @assertTrue(check)
  
  check = conjg(QpointPower(str('(q1^2*q2^3)'))) &
     & ==QpointPower(str('(q1^3*q2^2)'))
  @assertTrue(check)
end subroutine

@test
subroutine test_operate()
  logical :: check
  
  check = Group([1]) * QpointPower(str('(q1^2)')) &
     & == QpointPower(str('(q1^2)'))
  @assertTrue(check)
  
  check = Group([2,1]) * QpointPower(str('(q1^3)')) &
     & == QpointPower(str('(q2^3)'))
  @assertTrue(check)
  
  check = Group([1,3,2]) * QpointPower(str('(q2^4*q3^5)')) &
     & == QpointPower(str('(q2^5*q3^4)'))
  @assertTrue(check)
end subroutine

@test
subroutine test_generate_qpoint_powers()
  type :: TestCase
    type(QpointData)               :: qpoint
    integer                        :: max_power
    type(QpointPower), allocatable :: output(:)
  end type
  
  type(QpointData), allocatable :: qpoints(:)
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(QpointPower), allocatable :: output(:)
  type(String),      allocatable :: message(:)
  
  integer :: i,j
  
  qpoints = [ QpointData(FractionVector(str('   0 0 0')), 1, 1), &
            & QpointData(FractionVector(str(' 1/3 0 0')), 2, 3), &
            & QpointData(FractionVector(str('-1/3 0 0')), 3, 2)  ]
  
  test_cases = [                                                     &
     & TestCase( qpoint    = qpoints(1),                             &
     &           max_power = 0,                                      &
     &           output    = [QpointPower::] ),                      &
     & TestCase( qpoint    = qpoints(1),                             &
     &           max_power = 1,                                      &
     &           output    = QpointPower([str('(q1^1)')]) ),         &
     & TestCase( qpoint    = qpoints(1),                             &
     &           max_power = 2,                                      &
     &           output    = QpointPower([ str('(q1^1)'),            &
     &                                     str('(q1^2)')  ]) ),      &
     & TestCase( qpoint    = qpoints(2),                             &
     &           max_power = 1,                                      &
     &           output    = QpointPower([ str('(q2^0*q3^1)'),       &
     &                                     str('(q2^1*q3^0)')  ]) ), &
     & TestCase( qpoint    = qpoints(2),                             &
     &           max_power = 2,                                      &
     &           output    = QpointPower([ str('(q2^0*q3^1)'),       &
     &                                     str('(q2^1*q3^0)'),       &
     &                                     str('(q2^0*q3^2)'),       &
     &                                     str('(q2^1*q3^1)'),       &
     &                                     str('(q2^2*q3^0)')  ]) )  ]
  
  do i=1,size(test_cases)
    associate( qpoint    => test_cases(i)%qpoint,    &
             & max_power => test_cases(i)%max_power, &
             & expected  => test_cases(i)%output     )
      output = generate_qpoint_powers(qpoint,max_power)
      
      message = [ str('q-point:'),   &
                & str(qpoint),       &
                & str('max power:'), &
                & str(max_power),    &
                & str('output:'),    &
                & str(output),       &
                & str('expected:'),  &
                & str(expected)      ]
      
      @assertTrue(size(output)==size(expected), char(message))
      @assertTrue(all(output==expected), char(message))
      
      do j=1,size(output)-1
        @assertTrue(output(j)>output(j+1), char([message, str('j:'), str(j)]))
      enddo
    end associate
  enddo
end subroutine
end module
