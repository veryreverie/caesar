module subspace_qpoint_stars_test
  use funit
  
  use caesar_common_module

  use caesar_stars_module
  implicit none
contains

! Tests constructor.
@test
subroutine test_SubspaceQpointStars()
  type :: TestCase
    integer                        :: subspace_id
    type(QpointStars), allocatable :: powers(:)
  end type
  
  type(QpointStar), allocatable :: stars(:)
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(String), allocatable :: message(:)
  
  type(SubspaceQpointStars) :: subspace_stars
  
  logical :: check
  
  integer :: i,j
  
  stars = [                                 &
     & QpointStar([ str('()') ]),           &
     & QpointStar([ str('(q1^1)'),          &
     &              str('(q2^1)')  ]),      &
     & QpointStar([ str('(q1^2)'),          &
     &              str('(q2^2)')  ]),      &
     & QpointStar([ str('(q1^1)*(q2^1)') ]) ]
  
  test_cases = [                                                         &
     & TestCase( subspace_id = 1,                                        &
     &           powers      = [ QpointStars:: ] ),                      &
     & TestCase( subspace_id = 2,                                        &
     &           powers      = [ QpointStars( power = 0,                 &
     &                                        stars = stars([1]) ) ] ),  &
     & TestCase( subspace_id = 3,                                        &
     &           powers      = [ QpointStars( power = 0,                 &
     &                                        stars = stars([1]) ),      &
     &                           QpointStars( power = 1,                 &
     &                                        stars = stars([2]) ),      &
     &                           QpointStars( power = 2,                 &
     &                                        stars = stars([3,4]) ) ] ) ]
  
  do i=1,size(test_cases)
    associate( subspace_id => test_cases(i)%subspace_id, &
             & powers      => test_cases(i)%powers       )
      subspace_stars = SubspaceQpointStars(subspace_id, powers)
      
      message = [ str('subspace_id:'), &
                & str(subspace_id),    &
                & str('powers:'),      &
                & str(powers)          ]
      
      @assertTrue(subspace_stars%subspace_id==subspace_id, char(message))
      @assertTrue(size(subspace_stars%powers)==size(powers), char(message))
      do j=1,size(powers)
        associate( qpoint_stars     => powers(j),               &
                 & new_qpoint_stars => subspace_stars%powers(j) )
          check = new_qpoint_stars%power==qpoint_stars%power
          @assertTrue(check, char(message))
          check = size(new_qpoint_stars%stars)==size(qpoint_stars%stars)
          @assertTrue(check, char(message))
          check = all(new_qpoint_stars%stars==qpoint_stars%stars)
          @assertTrue(check, char(message))
        end associate
      enddo
    end associate
  enddo
end subroutine

@test
subroutine test_io()
  type :: TestCase
    type(SubspaceQpointStars) :: subspace_stars
    type(String), allocatable :: lines(:)
  end type
  
  type(QpointStar), allocatable :: stars(:)
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(SubspaceQpointStars) :: new_subspace_stars
  type(String), allocatable :: new_lines(:)
  
  logical :: check
  
  integer :: i,j
  
  stars = [                                 &
     & QpointStar([ str('()') ]),           &
     & QpointStar([ str('(q1^1)'),          &
     &              str('(q2^1)')  ]),      &
     & QpointStar([ str('(q1^2)'),          &
     &              str('(q2^2)')  ]),      &
     & QpointStar([ str('(q1^1)*(q2^1)') ]) ]
  
  test_cases = [                                                           &
     & TestCase( SubspaceQpointStars(                                      &
     &              subspace_id = 1,                                       &
     &              powers      = [ QpointStars:: ] ),                     &
     &           [ str('q-point stars in subspace 1 :') ] ),               &
     & TestCase( SubspaceQpointStars(                                      &
     &              subspace_id = 2,                                       &
     &              powers      = [ QpointStars( power = 0,                &
     &                                           stars = stars([1]) ) ] ), &
     &           [ str('q-point stars in subspace 2 :'),                   &
     &             str('q-point stars with power = 0 :'),                  &
     &             str('()')                              ] ),             &
     & TestCase( SubspaceQpointStars( &
     &              subspace_id = 3,                                        &
     &              powers      = [ QpointStars( power = 0,                 &
     &                                           stars = stars([1]) ),      &
     &                              QpointStars( power = 1,                 &
     &                                           stars = stars([2]) ),      &
     &                              QpointStars( power = 2,                 &
     &                                           stars = stars([3,4]) ) ] ), &
     &           [ str('q-point stars in subspace 3 :'),                   &
     &             str('q-point stars with power = 0 :'),                  &
     &             str('()'),                                              &
     &             str(repeat('-',50)),                                    &
     &             str('q-point stars with power = 1 :'),                  &
     &             str('(q1^1)'),                                          &
     &             str('(q2^1)'),                                          &
     &             str(repeat('-',50)),                                    &
     &             str('q-point stars with power = 2 :'),                  &
     &             str('(q1^2)'),                                          &
     &             str('(q2^2)'),                                          &
     &             str(''),                                                &
     &             str('(q1^1)*(q2^1)')                   ] )              ]
  
  do i=1,size(test_cases)
    associate( subspace_stars => test_cases(i)%subspace_stars, &
             & lines          => test_cases(i)%lines           )
      new_subspace_stars = SubspaceQpointStars(lines)
      check = new_subspace_stars%subspace_id==subspace_stars%subspace_id
      @assertTrue(check, char(lines))
      check = size(new_subspace_stars%powers)==size(subspace_stars%powers)
      @assertTrue(check, char(lines))
      do j=1,size(subspace_stars%powers)
        associate( qpoint_stars     => subspace_stars%powers(j),    &
                 & new_qpoint_stars => new_subspace_stars%powers(j) )
          check = new_qpoint_stars%power==qpoint_stars%power
          @assertTrue(check, char(lines))
          check = size(new_qpoint_stars%stars)==size(qpoint_stars%stars)
          @assertTrue(check, char(lines))
          check = all(new_qpoint_stars%stars==qpoint_stars%stars)
          @assertTrue(check, char(lines))
        end associate
      enddo
      
      new_lines = str(subspace_stars)
      check = size(new_lines)==size(lines)
      @assertTrue(check, char(lines))
      check = all(new_lines==lines)
      @assertTrue(check, char(lines))
    end associate
  enddo
end subroutine

@test
subroutine test_generate_subspace_qpoint_stars()
  type :: MockComplexMode
    integer :: id
    integer :: paired_id
    integer :: qpoint_id
    integer :: paired_qpoint_id
    integer :: subspace_id
  end type
  
  type :: TestCase
    type(DegenerateSubspace),   allocatable :: subspaces(:)
    type(MockComplexMode),      allocatable :: mock_modes(:)
    type(QpointData),           allocatable :: qpoints(:)
    type(Group),                allocatable :: qpoint_symmetry_groups(:)
    integer                                 :: max_power
    logical,                    allocatable :: conserve_momentum
    type(SubspaceQpointStars),  allocatable :: output(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(ComplexMode),      allocatable :: modes(:)
  
  type(SubspaceQpointStars), allocatable :: stars(:)
  
  type(String), allocatable :: message(:)
  
  logical :: check
  
  integer :: i,j,k
  
  test_cases = [                                                    &
     & TestCase(                                                    &
     &    [ DegenerateSubspace:: ],                                 &
     &    [ MockComplexMode:: ],                                    &
     &    [ QpointData:: ],                                         &
     &    [ Group:: ],                                              &
     &    0,                                                        &
     &    output = [ SubspaceQpointStars:: ]                        &
     & ),                                                           &
     & TestCase(                                                    &
     &    [ DegenerateSubspace:: ],                                 &
     &    [ MockComplexMode:: ],                                    &
     &    [ QpointData:: ],                                         &
     &    [ Group:: ],                                              &
     &    0,                                                        &
     &    .true.,                                                   &
     &    output = [ SubspaceQpointStars:: ]                        &
     & ),                                                           &
     & TestCase(                                                    &
     &    [                                                         &
     &       DegenerateSubspace(1, 0.0_dp, [1], [1])                &
     &    ],                                                        &
     &    [                                                         &
     &       MockComplexMode(1, 1, 1, 1, 1)                         &
     &    ],                                                        &
     &    [                                                         &
     &       QpointData(FractionVector(str('0 0 0')), 1, 1)         &
     &    ],                                                        &
     &    [ Group:: ],                                              &
     &    0,                                                        &
     &    output = [                                                &
     &       SubspaceQpointStars([                                  &
     &          str('q-point stars in subspace 1 :'),               &
     &          str('q-point stars with power = 0 :'),              &
     &          str('()')                                           &
     &       ])                                                     &
     &    ]                                                         &
     & ),                                                           &
     & TestCase(                                                    &
     &    [                                                         &
     &       DegenerateSubspace(1, 0.0_dp, [1], [1]),               &
     &       DegenerateSubspace(2, 0.0_dp, [2], [2])                &
     &    ],                                                        &
     &    [                                                         &
     &       MockComplexMode(1, 1, 1, 1, 1),                        &
     &       MockComplexMode(2, 2, 1, 1, 2)                         &
     &    ],                                                        &
     &    [                                                         &
     &       QpointData(FractionVector(str('0 0 0')), 1, 1)         &
     &    ],                                                        &
     &    [                                                         &
     &       Group([1])                                             &
     &    ],                                                        &
     &    2,                                                        &
     &    output = [                                                &
     &       SubspaceQpointStars([                                  &
     &          str('q-point stars in subspace 1 :'),               &
     &          str('q-point stars with power = 0 :'),              &
     &          str('()'),                                          &
     &          str(repeat('-',50)),                                &
     &          str('q-point stars with power = 1 :'),              &
     &          str('(q1^1)'),                                      &
     &          str(repeat('-',50)),                                &
     &          str('q-point stars with power = 2 :'),              &
     &          str('(q1^2)')                                       &
     &       ]),                                                    &
     &       SubspaceQpointStars([                                  &
     &          str('q-point stars in subspace 2 :'),               &
     &          str('q-point stars with power = 0 :'),              &
     &          str('()'),                                          &
     &          str(repeat('-',50)),                                &
     &          str('q-point stars with power = 1 :'),              &
     &          str('(q1^1)'),                                      &
     &          str(repeat('-',50)),                                &
     &          str('q-point stars with power = 2 :'),              &
     &          str('(q1^2)')                                       &
     &       ])                                                     &
     &    ]                                                         &
     & ),                                                           &
     & TestCase(                                                    &
     &    [                                                         &
     &       DegenerateSubspace(1, 0.0_dp, [1], [1]),               &
     &       DegenerateSubspace(2, 0.0_dp, [2], [2])                &
     &    ],                                                        &
     &    [                                                         &
     &       MockComplexMode(1, 1, 1, 1, 1),                        &
     &       MockComplexMode(2, 3, 2, 3, 2),                        &
     &       MockComplexMode(3, 2, 3, 2, 2),                        &
     &       MockComplexMode(4, 5, 2, 3, 2),                        &
     &       MockComplexMode(5, 4, 3, 2, 2)                         &
     &    ],                                                        &
     &    [                                                         &
     &       QpointData(FractionVector(str('   0 0 0')), 1, 1),     &
     &       QpointData(FractionVector(str(' 1/3 0 0')), 2, 3),     &
     &       QpointData(FractionVector(str('-1/3 0 0')), 3, 2)      &
     &    ],                                                        &
     &    [                                                         &
     &       Group([1,2,3])                                         &
     &    ],                                                        &
     &    2,                                                        &
     &    output = [                                                &
     &       SubspaceQpointStars([                                  &
     &          str('q-point stars in subspace 1 :'),               &
     &          str('q-point stars with power = 0 :'),              &
     &          str('()'),                                          &
     &          str(repeat('-',50)),                                &
     &          str('q-point stars with power = 1 :'),              &
     &          str('(q1^1)'),                                      &
     &          str(repeat('-',50)),                                &
     &          str('q-point stars with power = 2 :'),              &
     &          str('(q1^2)')                                       &
     &       ]),                                                    &
     &       SubspaceQpointStars([                                  &
     &          str('q-point stars in subspace 2 :'),               &
     &          str('q-point stars with power = 0 :'),              &
     &          str('()'),                                          &
     &          str(repeat('-',50)),                                &
     &          str('q-point stars with power = 1 :'),              &
     &          str('(q2^1*q3^0)'),                                 &
     &          str('(q2^0*q3^1)'),                                 &
     &          str(repeat('-',50)),                                &
     &          str('q-point stars with power = 2 :'),              &
     &          str('(q2^2*q3^0)'),                                 &
     &          str('(q2^0*q3^2)'),                                 &
     &          str(''),                                            &
     &          str('(q2^1*q3^1)')                                  &
     &       ])                                                     &
     &    ]                                                         &
     & )                                                            ]
  
  do i=1,size(test_cases)
    associate( subspaces         => test_cases(i)%subspaces,              &
             & mock_modes        => test_cases(i)%mock_modes,             &
             & qpoints           => test_cases(i)%qpoints,                &
             & qpoint_groups     => test_cases(i)%qpoint_symmetry_groups, &
             & max_power         => test_cases(i)%max_power,              &
             & conserve_momentum => test_cases(i)%conserve_momentum,      &
             & expected_stars    => test_cases(i)%output                  )
      modes = mock_to_ComplexMode(mock_modes)
      
      stars = generate_subspace_qpoint_stars( subspaces,        &
                                            & modes,            &
                                            & qpoints,          &
                                            & qpoint_groups,    &
                                            & max_power,        &
                                            & conserve_momentum )
      
      message = [ str('subspaces:'),                                  &
                & str(subspaces),                                     &
                & str('mode:'),                                       &
                & str(modes),                                         &
                & str('qpoints:'),                                    &
                & str(qpoints),                                       &
                & str('qpoint_groups:'),                              &
                & str(qpoint_groups),                                 &
                & str('max_power:'),                                  &
                & str(max_power),                                     &
                & str('stars:'),                                      &
                & str(stars, separating_line=repeat('#',50)),         &
                & str('expected stars:'),                             &
                & str(expected_stars, separating_line=repeat('#',50)) ]
      
      check = size(stars)==size(expected_stars)
      @assertTrue(check, char(message))
      check = all(stars%subspace_id==expected_stars%subspace_id)
      @assertTrue(check, char(message))
      do j=1,size(expected_stars)
        associate( powers          => stars(j)%powers,         &
                 & expected_powers => expected_stars(j)%powers )
          check = size(powers)==size(expected_powers)
          @assertTrue(check, char(message))
          check = all(powers%power==expected_powers%power)
          @assertTrue(check, char(message))
          do k=1,size(expected_powers)
            associate(                                                      &
               & qpoint_stars          => stars(j)%powers(k)%stars,         &
               & expected_qpoint_stars => expected_stars(j)%powers(k)%stars )
              check = size(qpoint_stars)==size(expected_qpoint_stars)
              @assertTrue(check, char(message))
              check = all(qpoint_stars==expected_qpoint_stars)
              @assertTrue(check, char(message))
            end associate
          enddo
        end associate
      enddo
    end associate
  enddo
contains
  impure elemental function mock_to_ComplexMode(mock) result(output)
    type(MockComplexMode), intent(in) :: mock
    type(ComplexMode)                 :: output
    
    output = ComplexMode( id                 = mock%id,               &
                        & paired_id          = mock%paired_id,        &
                        & frequency          = 0.0_dp,                &
                        & spring_constant    = 0.0_dp,                &
                        & soft_mode          = .false.,               &
                        & translational_mode = .false.,               &
                        & unit_vector        = [ComplexVector::],     &
                        & qpoint_id          = mock%qpoint_id,        &
                        & paired_qpoint_id   = mock%paired_qpoint_id, &
                        & subspace_id        = mock%subspace_id       )
  end function
end subroutine
end module
