!> Tests for [[QpointCombination(type)]].
module combination_qpoint_combination_test
  use funit

  use caesar_common_module
  
  use caesar_subspaces_module

  use caesar_stars_module
  implicit none
contains

! Tests constructor.
@test
subroutine test_CombinationQpointCombination()
  type :: TestCase
    type(SubspaceCombination)            :: subspace_combination
    type(QpointCombination), allocatable :: qpoint_combinations(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(CombinationQpointCombination) :: combination
  
  type(String), allocatable :: message(:)
  
  logical :: check
  
  integer :: i
  
  test_cases = [ TestCase( SubspaceCombination(str('()')),                &
               &           [ QpointCombination:: ]         ),             &
               & TestCase( SubspaceCombination(str('(s1^1)')),            &
               &           [ QpointCombination(str('(q1^1)')) ] ),        &
               & TestCase( SubspaceCombination(str('(s3^2*s6^3*s8^1)')),  &
               &           [ QpointCombination(str('(q1^1)*(q4^1)')),     &
               &             QpointCombination(str('(q2^2*q3^1)')),       &
               &             QpointCombination(str('(q5^0*q8^1)'))    ] ) ]
  
  do i=1,size(test_cases)
    associate( subspace_combination => test_cases(i)%subspace_combination, &
             & qpoint_combinations  => test_cases(i)%qpoint_combinations   )
      message = [ str('subspace_combnination:'), &
                & str(subspace_combination),     &
                & str('qpoint_combinations:'),   &
                & str(qpoint_combinations)       ]
      
      combination = CombinationQpointCombination( subspace_combination, &
                                                & qpoint_combinations   )
      
      check = combination%subspace_combination==subspace_combination
      @assertTrue(check, char(message))
      check = size(combination%qpoint_combinations) &
         & == size(qpoint_combinations)
      @assertTrue(check, char(message))
      check = all(combination%qpoint_combinations==qpoint_combinations)
      @assertTrue(check, char(message))
    end associate
  enddo
end subroutine

@test
subroutine test_total_power()
  type(CombinationQpointCombination) :: foo
  
  foo = CombinationQpointCombination([                          &
     & str('q-point combination in subspace combination () :'), &
     & str('()')                                                ])
  @assertTrue(foo%total_power()==0)
  
  foo = CombinationQpointCombination([                              &
     & str('q-point combination in subspace combination (s1^1) :'), &
     & str('(q1^1)')                                                ])
  @assertTrue(foo%total_power()==1)
  
  foo = CombinationQpointCombination([                                    &
     & str('q-point combination in subspace combination (s3^15*s5^4) :'), &
     & str('(q2^3*q4^5)*(q6^4*q2^3) * (q1^4)')                            ])
  @assertTrue(foo%total_power()==19)
end subroutine

@test
subroutine test_wavevector()
  type :: TestCase
    type(CombinationQpointCombination) :: combination
    type(QpointData), allocatable      :: qpoints(:)
    type(FractionVector)               :: wavevector
  end type
  
  type(QpointData), allocatable :: test_qpoints(:)
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(FractionVector) :: wavevector
  
  type(String), allocatable :: message(:)
  
  integer :: i
  
  test_qpoints = [                                               &
     & QpointData( FractionVector(str('   0    0    0')), 1, 1), &
     & QpointData( FractionVector(str(' 1/2    0    0')), 2, 2), &
     & QpointData( FractionVector(str('   0  1/2    0')), 3, 3), &
     & QpointData( FractionVector(str('   0    0  1/2')), 4, 4), &
     & QpointData( FractionVector(str(' 1/4    0    0')), 5, 6), &
     & QpointData( FractionVector(str('-1/4    0    0')), 6, 5), &
     & QpointData( FractionVector(str('   0  1/4    0')), 7, 8), &
     & QpointData( FractionVector(str('   0 -1/4    0')), 8, 7)  ]
  
  test_cases = [                                                              &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination () :'),         &
     &       str('()')                                                        &
     &    ]),                                                                 &
     &    [QpointData::],                                                     &
     &    FractionVector(str('0 0 0'))                                        &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination () :'),         &
     &       str('()')                                                        &
     &    ]),                                                                 &
     &    test_qpoints,                                                       &
     &    FractionVector(str('0 0 0'))                                        &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination (s1^1) :'),     &
     &       str('(q1^1)')                                                    &
     &    ]),                                                                 &
     &    test_qpoints([1]),                                                  &
     &    FractionVector(str('0 0 0'))                                        &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination (s3^7) :'),     &
     &       str('(q2^2)*(q4^5)')                                             &
     &    ]),                                                                 &
     &    test_qpoints([5,2,4,7]),                                            &
     &    FractionVector(str('1 0 5/2'))                                      &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &      str('q-point combination in subspace combination (s3^2*s6^5) :'), &
     &      str('(q2^2) * (q4^5)')                                            &
     &    ]),                                                                 &
     &    test_qpoints([5,2,4,7]),                                            &
     &    FractionVector(str('1 0 5/2'))                                      &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination (s6^5) :'),     &
     &       str('(q7^3*q8^2)')                                               &
     &    ]),                                                                 &
     &    test_qpoints([5,7,4,2]),                                            &
     &    FractionVector(str('0 1/4 0'))                                      &
     & )                                                                      ]
  
  do i=1,size(test_cases)
    associate( combination         => test_cases(i)%combination, &
             & qpoints             => test_cases(i)%qpoints,     &
             & expected_wavevector => test_cases(i)%wavevector   )
      wavevector = combination%wavevector(qpoints)
      
      message = [ str('combination:'),         &
                & str(combination),            &
                & str('qpoints:'),             &
                & str(qpoints),                &
                & str('wavevector:'),          &
                & str(wavevector),             &
                & str('expected_wavevector:'), &
                & str(expected_wavevector)     ]
      
      @assertTrue(wavevector==expected_wavevector, char(message))
    end associate
  enddo
end subroutine

@test
subroutine test_complex_monomials()
  type :: MockComplexMode
    integer :: id
    integer :: paired_id
    integer :: qpoint_id
    integer :: paired_qpoint_id
    integer :: subspace_id
  end type
  
  type :: TestCase
    type(CombinationQpointCombination) :: combination
    type(MockComplexMode), allocatable :: mock_modes(:)
    type(ComplexMonomial), allocatable :: output(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(ComplexMode), allocatable :: modes(:)
  
  type(ComplexMonomial), allocatable :: monomials(:)
  
  type(String), allocatable :: message(:)
  
  logical :: check
  
  integer :: i
  
  test_cases = [                                                              &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination () :'),         &
     &       str('()')                                                        &
     &    ]),                                                                 &
     &    [ MockComplexMode:: ],                                              &
     &    [ ComplexMonomial(str(1)) ]                                         &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination (s1^1) :'),     &
     &       str('(q1^1)')                                                    &
     &    ]),                                                                 &
     &    [ MockComplexMode:: ],                                              &
     &    [ ComplexMonomial:: ]                                               &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination (s1^2) :'),     &
     &       str('(q1^1)*(q2^1)')                                             &
     &    ]),                                                                 &
     &    [ MockComplexMode(1,1,1,1,1),                                       &
     &      MockComplexMode(2,2,2,2,1),                                       &
     &      MockComplexMode(3,3,1,1,2),                                       &
     &      MockComplexMode(4,4,2,2,2)  ],                                    &
     &    [ ComplexMonomial(str('1*(u1^1)*(u2^1)')) ]                         &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &      str('q-point combination in subspace combination (s1^1*s2^1) :'), &
     &      str('(q1^1) * (q2^1)')                                            &
     &    ]),                                                                 &
     &    [ MockComplexMode(1,1,1,1,1),                                       &
     &      MockComplexMode(2,2,2,2,1),                                       &
     &      MockComplexMode(3,3,1,1,2),                                       &
     &      MockComplexMode(4,4,2,2,2)  ],                                    &
     &    [ ComplexMonomial(str('1*(u1^1)*(u4^1)')) ]                         &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &      str('q-point combination in subspace combination (s3^4*s5^2) :'), &
     &      str('(q3^2)*(q7^2) * (q3^2)')                                     &
     &    ]),                                                                 &
     &    [ MockComplexMode(1,1,3,3,3),                                       &
     &      MockComplexMode(2,2,3,3,3),                                       &
     &      MockComplexMode(3,3,7,7,3),                                       &
     &      MockComplexMode(4,4,8,8,3),                                       &
     &      MockComplexMode(6,6,3,3,5)  ],                                    &
     &    [ ComplexMonomial(str('1*(u1^2)*(u3^2)*(u6^2)')),                   &
     &      ComplexMonomial(str('1*(u1^1)*(u2^1)*(u3^2)*(u6^2)')),            &
     &      ComplexMonomial(str('1*(u2^2)*(u3^2)*(u6^2)'))         ]          &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &      str('q-point combination in subspace combination (s1^2*s3^2) :'), &
     &      str('(q5^1*q6^1) * (q7^1*q8^1)')                                  &
     &    ]),                                                                 &
     &    [ MockComplexMode(4,6,5,6,1),                                       &
     &      MockComplexMode(5,7,5,6,1),                                       &
     &      MockComplexMode(6,4,6,5,1),                                       &
     &      MockComplexMode(7,5,6,5,1),                                       &
     &      MockComplexMode(8,9,7,8,3),                                       &
     &      MockComplexMode(9,8,8,7,3)  ],                                    &
     &    [ ComplexMonomial(str('1*(u4^1*u6^1)*(u8^1*u9^1)')),                &
     &      ComplexMonomial(str('1*(u4^1*u6^0)*(u5^0*u7^1)*(u8^1*u9^1)')),    &
     &      ComplexMonomial(str('1*(u4^0*u6^1)*(u5^1*u7^0)*(u8^1*u9^1)')),    &
     &      ComplexMonomial(str('1*(u5^1*u7^1)*(u8^1*u9^1)'))              ]  &
     & )                                                                      ]
  
  do i=1,size(test_cases)
    associate( combination        => test_cases(i)%combination, &
             & mock_modes         => test_cases(i)%mock_modes,  &
             & expected_monomials => test_cases(i)%output       )
      modes = mock_to_ComplexMode(mock_modes)
      
      monomials = combination%complex_monomials(modes)
      
      message = [ str('combination:'),            &
                & str(combination),               &
                & str('modes:'),                  &
                & str(modes, separating_line=''), &
                & str('monomials:'),              &
                & str(monomials),                 &
                & str('expected_monomials:'),     &
                & str(expected_monomials)         ]
      
      check = size(monomials)==size(expected_monomials)
      @assertTrue(check, char(message))
      check = all(check_equal(monomials,expected_monomials))
      @assertTrue(check, char(message))
    end associate
  enddo
contains
  ! Convert a MockComplexMode to a ComplexMode.
  impure elemental function mock_to_ComplexMode(input) result(output)
    type(MockComplexMode), intent(in) :: input
    type(ComplexMode)                 :: output
    
    output = ComplexMode( input%id,               &
                        & input%paired_id,        &
                        & 0.0_dp,                 &
                        & 0.0_dp,                 &
                        & .false.,                &
                        & .false.,                &
                        & [ComplexVector::],      &
                        & input%qpoint_id,        &
                        & input%paired_qpoint_id, &
                        & input%subspace_id       )
  end function
  
  ! Check two complex monomials are equal (ignoring the coefficient).
  impure elemental function check_equal(this,that) result(output)
    type(ComplexMonomial), intent(in) :: this
    type(ComplexMonomial), intent(in) :: that
    logical                           :: output
    
    if (size(this)/=size(that)) then
      output = .false.
      return
    else
      output = all(this%ids()==that%ids())               &
       & .and. all(this%paired_ids()==that%paired_ids()) &
       & .and. all(this%powers()==that%powers())         &
       & .and. all(this%paired_powers()==that%paired_powers())
    endif
  end function
end subroutine

@test
subroutine test_io()
  type :: TestCase
    type(CombinationQpointCombination) :: combination
    type(String), allocatable          :: lines(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(CombinationQpointCombination) :: new_combination
  type(String), allocatable          :: new_lines(:)
  
  integer :: i
  
  test_cases = [                                                              &
     & TestCase(                                                              &
     &    CombinationQpointCombination(                                       &
     &       SubspaceCombination(str('()')),                                  &
     &       QpointCombination([ String:: ]) ),                               &
     &    [ str('q-point combination in subspace combination () :'),          &
     &      str('()')                                                ]        &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination(                                       &
     &       SubspaceCombination(str('(s1^1)')),                              &
     &       QpointCombination([ str('(q1^1)') ])      ),                     &
     &    [ str('q-point combination in subspace combination (s1^1) :'),      &
     &      str('(q1^1)')                                                ]    &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination(                                       &
     &       SubspaceCombination(str('(s3^2*s5^3)')),                         &
     &       QpointCombination([ str('(q1^1*q2^1)'),                          &
     &                           str('(q4^2)*(q6^1)') ]) ),                   &
     &    [ str('q-point combination in subspace combination (s3^2*s5^3) :'), &
     &      str('(q1^1*q2^1) * (q4^2)*(q6^1)')                               ]&
     & )                                                                      ]
  
  do i=1,size(test_cases)
    associate( combination => test_cases(i)%combination, &
             & lines       => test_cases(i)%lines        )
      new_combination = CombinationQpointCombination(lines)
      @assertTrue(new_combination==combination, char(lines))
      
      new_lines = str(combination)
      @assertTrue(size(new_lines)==size(lines), char(lines))
      @assertTrue(all(new_lines==lines), char(lines))
    end associate
  enddo
end subroutine

@test
subroutine test_comparison
  type(CombinationQpointCombination), allocatable :: combinations(:)
  
  type(String), allocatable :: message(:)
  
  integer :: i,j
  
  ! An array of q-point combinations in ascending order.
  combinations = [                                                          &
     & CombinationQpointCombination([                                       &
     &    str('q-point combination in subspace combination () :'),          &
     &    str('()')  ]),                                                    &
     & CombinationQpointCombination([                                       &
     &    str('q-point combination in subspace combination (s1^1) :'),      &
     &    str('(q1^1)')  ]),                                                &
     & CombinationQpointCombination([                                       &
     &    str('q-point combination in subspace combination (s1^1) :'),      &
     &    str('(q2^1)')  ]),                                                &
     & CombinationQpointCombination([                                       &
     &    str('q-point combination in subspace combination (s2^1) :'),      &
     &    str('(q1^1)')  ]),                                                &
     & CombinationQpointCombination([                                       &
     &    str('q-point combination in subspace combination (s2^1) :'),      &
     &    str('(q2^1)')  ]),                                                &
     & CombinationQpointCombination([                                       &
     &    str('q-point combination in subspace combination (s1^2) :'),      &
     &    str('(q1^2)')  ]),                                                &
     & CombinationQpointCombination([                                       &
     &    str('q-point combination in subspace combination (s1^1*s2^1) :'), &
     &    str('(q1^1) * (q1^1)')  ]),                                       &
     & CombinationQpointCombination([                                       &
     &    str('q-point combination in subspace combination (s1^1*s2^1) :'), &
     &    str('(q1^1) * (q2^1)')  ]),                                       &
     & CombinationQpointCombination([                                       &
     &    str('q-point combination in subspace combination (s1^1*s2^1) :'), &
     &    str('(q2^1) * (q1^1)')  ]),                                       &
     & CombinationQpointCombination([                                       &
     &    str('q-point combination in subspace combination (s1^1*s2^1) :'), &
     &    str('(q2^1) * (q2^1)')  ]),                                       &
     & CombinationQpointCombination([                                       &
     &    str('q-point combination in subspace combination (s2^2) :'),      &
     &    str('(q1^2)')  ])                                                 ]
  
  do i=1,size(combinations)
    do j=1,size(combinations)
      associate( lhs=>combinations(i), &
               & rhs=>combinations(j)  )
        message = [ str('lhs:'), &
                  & str(lhs),    &
                  & str('rhs:'), &
                  & str(rhs)     ]
        if (i<j) then
          @assertFalse(lhs==rhs, char(message))
          @assertTrue(lhs/=rhs, char(message))
          @assertTrue(lhs<rhs, char(message))
          @assertTrue(lhs<=rhs, char(message))
          @assertFalse(lhs>rhs, char(message))
          @assertFalse(lhs>=rhs, char(message))
        elseif (i==j) then
          @assertTrue(lhs==rhs, char(message))
          @assertFalse(lhs/=rhs, char(message))
          @assertFalse(lhs<rhs, char(message))
          @assertTrue(lhs<=rhs, char(message))
          @assertFalse(lhs>rhs, char(message))
          @assertTrue(lhs>=rhs, char(message))
        elseif (i>j) then
          @assertFalse(lhs==rhs, char(message))
          @assertTrue(lhs/=rhs, char(message))
          @assertFalse(lhs<rhs, char(message))
          @assertFalse(lhs<=rhs, char(message))
          @assertTrue(lhs>rhs, char(message))
          @assertTrue(lhs>=rhs, char(message))
        endif
      end associate
    enddo
  enddo
end subroutine

@test
subroutine test_conjg()
  type :: TestCase
    type(CombinationQpointCombination) :: combination
    type(CombinationQpointCombination) :: conjugate
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(CombinationQpointCombination) :: conjugate
  
  integer :: i
  
  test_cases = [                                                              &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination () :'),         &
     &       str('()')                                                        &
     &    ]),                                                                 &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination () :'),         &
     &       str('()')                                                        &
     &    ])                                                                  &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination (s1^1) :'),     &
     &       str('(q1^1)')                                                    &
     &    ]),                                                                 &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination (s1^1) :'),     &
     &       str('(q1^1)')                                                    &
     &    ])                                                                  &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination (s1^1) :'),     &
     &       str('(q1^1*q2^0)')                                               &
     &    ]),                                                                 &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination (s1^1) :'),     &
     &       str('(q1^0*q2^1)')                                               &
     &    ])                                                                  &
     & ),                                                                     &
     & TestCase(                                                              &
     &    CombinationQpointCombination([                                      &
     &      str('q-point combination in subspace combination (s4^3*s6^7) :'), &
     &      str('(q4^1*q6^2) * (q3^4)*(q5^3)')                                &
     &    ]),                                                                 &
     &    CombinationQpointCombination([                                      &
     &      str('q-point combination in subspace combination (s4^3*s6^7) :'), &
     &      str('(q4^2*q6^1) * (q3^4)*(q5^3)')                                &
     &   ])                                                                   &
     & )                                                                      ]
  
  do i=1,size(test_cases)
    associate( combination        => test_cases(i)%combination, &
             & expected_conjugate => test_cases(i)%conjugate    )
      conjugate = conjg(combination)
      @assertTrue(conjugate==expected_conjugate, char(str(combination)))
    end associate
  enddo
end subroutine

@test
subroutine test_operate()
  type :: TestCase
    type(Group)                        :: qpoint_group
    type(CombinationQpointCombination) :: combination
    type(CombinationQpointCombination) :: output
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(CombinationQpointCombination) :: transformed_combination
  
  type(String), allocatable :: message(:)
  
  integer :: i
  
  test_cases = [                                                              &
     & TestCase(                                                              &
     &    Group([integer::]),                                                 &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination () :'),         &
     &       str('()')                                                        &
     &    ]),                                                                 &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination () :'),         &
     &       str('()')                                                        &
     &    ])                                                                  &
     & ),                                                                     &
     & TestCase(                                                              &
     &    Group([3,2,1]),                                                     &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination (s1^1) :'),     &
     &       str('(q1^1)')                                                    &
     &    ]),                                                                 &
     &    CombinationQpointCombination([                                      &
     &       str('q-point combination in subspace combination (s1^1) :'),     &
     &       str('(q3^1)')                                                    &
     &    ])                                                                  &
     & ),                                                                     &
     & TestCase(                                                              &
     &    Group([3,5,7,6,2,4,1]),                                             &
     &    CombinationQpointCombination([                                      &
     &      str('q-point combination in subspace combination (s4^2*s5^4) :'), &
     &      str('(q2^1*q4^1) * (q3^2)*(q7^2)')                                &
     &    ]),                                                                 &
     &    CombinationQpointCombination([                                      &
     &      str('q-point combination in subspace combination (s4^2*s5^4) :'), &
     &      str('(q5^1*q6^1) * (q7^2)*(q1^2)')                                &
     &    ])                                                                  &
     & )                                                                      ]
  
  do i=1,size(test_cases)
    associate( qpoint_group         => test_cases(i)%qpoint_group, &
             & combination          => test_cases(i)%combination,  &
             & expected_combination => test_cases(i)%output        )
      transformed_combination = qpoint_group * combination
      
      message = [ str('qpoint_group:'),            &
                & str(qpoint_group),               &
                & str('combination:'),             &
                & str(combination),                &
                & str('transformed_combination:'), &
                & str(transformed_combination),    &
                & str('expected_combination:'),    &
                & str(expected_combination)        ]
      
      @assertTrue(transformed_combination==expected_combination, char(message))
    end associate
  enddo
end subroutine

@test
subroutine test_generate_combination_qpoint_combinations()
  type :: TestCase
    type(QpointStarProduct)                         :: qpoint_star_product
    logical,                            allocatable :: conserve_momentum
    type(QpointData),                   allocatable :: qpoints(:)
    type(CombinationQpointCombination), allocatable :: output(:)
  end type
  
  type(QpointData), allocatable :: test_qpoints(:)
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(CombinationQpointCombination), allocatable :: combinations(:)
  
  type(String), allocatable :: message(:)
  
  logical :: check
  
  integer :: i
  
  test_qpoints = [                                               &
     & QpointData( FractionVector(str('   0    0    0')), 1, 1), &
     & QpointData( FractionVector(str(' 1/2    0    0')), 2, 2), &
     & QpointData( FractionVector(str('   0  1/2    0')), 3, 3), &
     & QpointData( FractionVector(str('   0    0  1/2')), 4, 4), &
     & QpointData( FractionVector(str(' 1/4    0    0')), 5, 6), &
     & QpointData( FractionVector(str('-1/4    0    0')), 6, 5), &
     & QpointData( FractionVector(str('   0  1/4    0')), 7, 8), &
     & QpointData( FractionVector(str('   0 -1/4    0')), 8, 7)  ]
  
  test_cases = [                                                             &
     & TestCase(                                                             &
     &    QpointStarProduct([                                                &
     &       str('q-point star product in subspace combination () :')        &
     &    ]),                                                                &
     &    .false.,                                                           &
     &    [ QpointData:: ],                                                  &
     &    [ CombinationQpointCombination:: ]                                 &
     & ),                                                                    &
     & TestCase(                                                             &
     &    QpointStarProduct([                                                &
     &       str('q-point star product in subspace combination (s1^1) :'),   &
     &       str('(q1^1)')                                                   &
     &    ]),                                                                &
     &    .false.,                                                           &
     &    [ QpointData:: ],                                                  &
     &    [                                                                  &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination (s1^1) :'), &
     &          str('(q1^1)')                                                &
     &       ])                                                              &
     &    ]                                                                  &
     & ),                                                                    &
     & TestCase(                                                             &
     &    QpointStarProduct([                                                &
     &       str('q-point star product in subspace combination (s1^1) :'),   &
     &       str('(q1^1)')                                                   &
     &    ]),                                                                &
     &    .true.,                                                            &
     &    test_qpoints,                                                      &
     &    [                                                                  &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination (s1^1) :'), &
     &          str('(q1^1)')                                                &
     &       ])                                                              &
     &    ]                                                                  &
     & ),                                                                    &
     & TestCase(                                                             &
     &    QpointStarProduct([                                                &
     &       str('q-point star product in subspace combination (s1^1) :'),   &
     &       str('(q2^1)')                                                   &
     &    ]),                                                                &
     &    .true.,                                                            &
     &    test_qpoints,                                                      &
     &    [ CombinationQpointCombination:: ]                                 &
     & ),                                                                    &
     & TestCase(                                                             &
     &    QpointStarProduct([                                                &
     &       str('q-point star product in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &       str('(q2^2)*(q4^1)'),                                           &
     &       str('(q3^2)*(q4^1)'),                                           &
     &       str('*'),                                                       &
     &       str('(q5^2*q6^0)'),                                             &
     &       str('(q5^0*q6^2)'),                                             &
     &       str('(q7^2*q8^0)'),                                             &
     &       str('(q7^0*q8^2)')                                              &
     &    ]),                                                                &
     &    .false.,                                                           &
     &    test_qpoints,                                                      &
     &    [                                                                  &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &          str('(q2^2)*(q4^1) * (q5^2*q6^0)')                           &
     &       ]),                                                             &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &          str('(q2^2)*(q4^1) * (q5^0*q6^2)')                           &
     &       ]),                                                             &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &          str('(q2^2)*(q4^1) * (q7^2*q8^0)')                           &
     &       ]),                                                             &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &          str('(q2^2)*(q4^1) * (q7^0*q8^2)')                           &
     &       ]),                                                             &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &          str('(q3^2)*(q4^1) * (q5^2*q6^0)')                           &
     &       ]),                                                             &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &          str('(q3^2)*(q4^1) * (q5^0*q6^2)')                           &
     &       ]),                                                             &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &          str('(q3^2)*(q4^1) * (q7^2*q8^0)')                           &
     &       ]),                                                             &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &          str('(q3^2)*(q4^1) * (q7^0*q8^2)')                           &
     &       ])                                                              &
     &    ]                                                                  &
     & ),                                                                    &
     & TestCase(                                                             &
     &    QpointStarProduct([                                                &
     &       str('q-point star product in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &       str('(q2^1)*(q4^2)'),                                           &
     &       str('(q3^1)*(q4^2)'),                                           &
     &       str('*'),                                                       &
     &       str('(q5^2*q6^0)'),                                             &
     &       str('(q5^0*q6^2)'),                                             &
     &       str('(q7^2*q8^0)'),                                             &
     &       str('(q7^0*q8^2)')                                              &
     &    ]),                                                                &
     &    .true.,                                                            &
     &    test_qpoints,                                                      &
     &    [                                                                  &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &          str('(q2^1)*(q4^2) * (q5^2*q6^0)')                           &
     &       ]),                                                             &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &          str('(q2^1)*(q4^2) * (q5^0*q6^2)')                           &
     &       ]),                                                             &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &          str('(q3^1)*(q4^2) * (q7^2*q8^0)')                           &
     &       ]),                                                             &
     &       CombinationQpointCombination([                                  &
     &          str('q-point combination in subspace combination &
     &(s1^3*s2^2) :'),                                                       &
     &          str('(q3^1)*(q4^2) * (q7^0*q8^2)')                           &
     &       ])                                                              &
     &    ]                                                                  &
     & )                                                                     ]
  
  do i=1,size(test_cases)
    associate( qpoint_star_product   => test_cases(i)%qpoint_star_product, &
             & conserve_momentum     => test_cases(i)%conserve_momentum,   &
             & qpoints               => test_cases(i)%qpoints,             &
             & expected_combinations => test_cases(i)%output               )
      combinations = generate_combination_qpoint_combinations( &
                                        & qpoint_star_product, &
                                        & conserve_momentum,   &
                                        & qpoints              )
      
      message = [ str('qpoint_star_product:'),   &
                & str(qpoint_star_product),      &
                & str('conserve_momentum:'),     &
                & str(conserve_momentum),        &
                & str('qpoints:'),               &
                & str(qpoints),                  &
                & str('combinations:'),          &
                & str(combinations),             &
                & str('expected_combinations:'), &
                & str(expected_combinations)     ]
      
      check = size(combinations)==size(expected_combinations)
      @assertTrue(check, char(message))
      check = all(combinations==expected_combinations)
      @assertTrue(check, char(message))
      
      ! Check combinations are in ascending order.
      if (size(combinations)>1) then
        check = all(combinations(2:)>combinations(:size(combinations)-1))
        @assertTrue(check, char(message))
      endif
    end associate
  enddo
end subroutine
end module
