!> Tests for [[QpointStars(type)]].
module qpoint_stars_test
  use funit

  use caesar_common_module

  use caesar_stars_module
  implicit none
contains

! Test constructor.
@test
subroutine test_QpointStars()
  type :: TestCase
    integer                       :: power
    type(QpointStar), allocatable :: stars(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(QpointStars) :: qpoint_stars
  
  type(String), allocatable :: message(:)
  
  logical :: check
  
  integer :: i
  
  test_cases = [                                                    &
     & TestCase( power = 0,                                         &
     &           stars = [ QpointStar([ str('()') ]) ] ),           &
     & TestCase( power = 1,                                         &
     &           stars = [ QpointStar:: ] ),                        &
     & TestCase( power = 2,                                         &
     &           stars = [ QpointStar([ str('(q1^2)'),              &
     &                                  str('(q2^2)')  ]),          &
     &                     QpointStar([ str('(q1^1)*(q2^1)') ]) ] ) ]
  
  do i=1,size(test_cases)
    associate( power => test_cases(i)%power, &
             & stars => test_cases(i)%stars  )
      qpoint_stars = QpointStars(power, stars)
      
      message = [ str('power:'), &
                & str(power),    &
                & str('stars:'), &
                & str(stars)     ]
      
      check = qpoint_stars%power==power
      @assertTrue(check, char(message))
      check = size(qpoint_stars%stars)==size(stars)
      @assertTrue(check, char(message))
      check = all(qpoint_stars%stars==stars)
      @assertTrue(check, char(message))
    end associate
  enddo
end subroutine

@test
subroutine test_io()
  type :: TestCase
    type(QpointStars)         :: qpoint_stars
    type(String), allocatable :: lines(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(QpointStars)         :: new_qpoint_stars
  type(String), allocatable :: new_lines(:)
  
  logical :: check
  
  integer :: i
  
  test_cases = [                                                           &
     & TestCase( QpointStars(                                              &
     &              power = 0,                                             &
     &              stars = [ QpointStar([ str('()') ]) ] ),               &
     &           [ str('q-point stars with power = 0 :'),                  &
     &             str('()')                                     ]     ),  &
     & TestCase( QpointStars(                                              &
     &              power = 1,                                             &
     &              stars = [ QpointStar:: ] ),                            &
     &           [ str('q-point stars with power = 1 :') ] ),              &
     & TestCase( QpointStars(                                              &
     &              power = 2,                                             &
     &              stars = [ QpointStar([ str('(q1^2)'),                  &
     &                                     str('(q2^2)')  ]),              &
     &                        QpointStar([ str('(q1^1)*(q2^1)') ]) ] ),    &
     &           [ str('q-point stars with power = 2 :'),                  &
     &             str('(q1^2)'),                                          &
     &             str('(q2^2)'),                                          &
     &             str(''),                                                &
     &             str('(q1^1)*(q2^1)')                   ]              ) ]
  
  do i=1,size(test_cases)
    associate( qpoint_stars => test_cases(i)%qpoint_stars, &
             & lines               => test_cases(i)%lines  )
      new_qpoint_stars = QpointStars(lines)
      check = new_qpoint_stars%power==qpoint_stars%power
      @assertTrue(check, char(lines))
      check = size(new_qpoint_stars%stars)==size(qpoint_stars%stars)
      @assertTrue(check, char(lines))
      check = all(new_qpoint_stars%stars==qpoint_stars%stars)
      @assertTrue(check, char(lines))
      
      new_lines = str(qpoint_stars)
      @assertTrue(size(new_lines)==size(lines), char(lines))
      @assertTrue(all(new_lines==lines), char(lines))
    end associate
  enddo
end subroutine

@test
subroutine test_generate_qpoint_stars()
  type :: TestCase
    type(QpointData),  allocatable :: qpoints(:)
    type(Group),       allocatable :: qpoint_groups(:)
    integer                        :: power
    integer,           allocatable :: max_qpoint_coupling
    logical,           allocatable :: conserve_momentum
    type(QpointStars), allocatable :: output(:)
  end type
  
  type(QpointData), allocatable :: qpoints(:)
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(QpointStars), allocatable :: stars(:)
  
  type(String), allocatable :: message(:)
  
  logical :: check
  
  integer :: i,j
  
  qpoints = [ QpointData( FractionVector(str('   0    0    0')), 1, 1), &
            & QpointData( FractionVector(str(' 1/2    0    0')), 2, 2), &
            & QpointData( FractionVector(str('   0  1/2    0')), 3, 3), &
            & QpointData( FractionVector(str('   0    0  1/4')), 4, 5), &
            & QpointData( FractionVector(str('   0    0 -1/4')), 5, 4)  ]
  
  test_cases = [                                                  &
     & TestCase(                                                  &
     &    qpoints           = [ QpointData:: ],                   &
     &    qpoint_groups     = [ Group([integer::]) ],             &
     &    power             = 0,                                  &
     &    output            = [                                   &
     &       QpointStars(                                         &
     &          power = 0,                                        &
     &          stars = [ QpointStar([ str('()') ]) ]             &
     &       )                                                    &
     &    ]                                                       &
     & ),                                                         &
     & TestCase(                                                  &
     &    qpoints           = [ QpointData:: ],                   &
     &    qpoint_groups     = [ Group([integer::]) ],             &
     &    power             = 1,                                  &
     &    output            = [                                   &
     &       QpointStars(                                         &
     &          power = 0,                                        &
     &          stars = [ QpointStar([ str('()') ]) ]             &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 1,                                        &
     &          stars = [ QpointStar:: ]                          &
     &       )                                                    &
     &    ]                                                       &
     & ),                                                         &
     & TestCase(                                                  &
     &    qpoints           = qpoints([1]),                       &
     &    qpoint_groups     = [ Group([1]) ],                     &
     &    power             = 0,                                  &
     &    output            = [                                   &
     &       QpointStars(                                         &
     &          power = 0,                                        &
     &          stars = [ QpointStar([ str('()') ]) ]             &
     &       )                                                    &
     &    ]                                                       &
     & ),                                                         &
     & TestCase(                                                  &
     &    qpoints           = qpoints([1]),                       &
     &    qpoint_groups     = [ Group([1]) ],                     &
     &    power             = 1,                                  &
     &    output            = [                                   &
     &       QpointStars(                                         &
     &          power = 0,                                        &
     &          stars = [ QpointStar([ str('()') ]) ]             &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 1,                                        &
     &          stars = [ QpointStar([ str('(q1^1)') ]) ]         &
     &       )                                                    &
     &    ]                                                       &
     & ),                                                         &
     & TestCase(                                                  &
     &    qpoints           = qpoints([1]),                       &
     &    qpoint_groups     = [ Group([1]) ],                     &
     &    power             = 2,                                  &
     &    output            = [                                   &
     &       QpointStars(                                         &
     &          power = 0,                                        &
     &          stars = [ QpointStar([ str('()') ]) ]             &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 1,                                        &
     &          stars = [ QpointStar([ str('(q1^1)') ]) ]         &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 2,                                        &
     &          stars = [ QpointStar([ str('(q1^2)') ]) ]         &
     &       )                                                    &
     &    ]                                                       &
     & ),                                                         &
     & TestCase(                                                  &
     &    qpoints           = qpoints([2,3]),                     &
     &    qpoint_groups     = [ Group([1,2,3]) ],                 &
     &    power             = 2,                                  &
     &    output            = [                                   &
     &       QpointStars(                                         &
     &          power = 0,                                        &
     &          stars = [ QpointStar([ str('()') ]) ]             &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 1,                                        &
     &          stars = [ QpointStar([ str('(q2^1)') ]),          &
     &                    QpointStar([ str('(q3^1)') ])  ]        &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 2,                                        &
     &          stars = [ QpointStar([ str('(q2^2)') ]),          &
     &                    QpointStar([ str('(q2^1)*(q3^1)') ]),   &
     &                    QpointStar([ str('(q3^2)') ])         ] &
     &       )                                                    &
     &    ]                                                       &
     & ),                                                         &
     & TestCase(                                                  &
     &    qpoints           = qpoints([2,3]),                     &
     &    qpoint_groups     = [ Group([1,2,3]) ],                 &
     &    power             = 2,                                  &
     &    conserve_momentum = .true.,                             &
     &    output            = [                                   &
     &       QpointStars(                                         &
     &          power = 0,                                        &
     &          stars = [ QpointStar([ str('()') ]) ] ),          &
     &       QpointStars(                                         &
     &          power = 1,                                        &
     &          stars = [ QpointStar:: ]                          &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 2,                                        &
     &          stars = [ QpointStar([ str('(q2^2)') ]),          &
     &                    QpointStar([ str('(q3^2)') ])  ]        &
     &       )                                                    &
     &    ]                                                       &
     & ),                                                         &
     & TestCase(                                                  &
     &    qpoints           = qpoints([2,3]),                     &
     &    qpoint_groups     = [ Group([1,2,3]),                   &
     &                          Group([1,3,2])  ],                &
     &    power             = 2,                                  &
     &    conserve_momentum = .false.,                            &
     &    output            = [                                   &
     &       QpointStars(                                         &
     &          power = 0,                                        &
     &          stars = [ QpointStar([ str('()') ]) ]             &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 1,                                        &
     &          stars = [ QpointStar([ str('(q2^1)'),             &
     &                                 str('(q3^1)')  ])  ]       &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 2,                                        &
     &          stars = [ QpointStar([ str('(q2^2)'),             &
     &                                 str('(q3^2)')  ]),         &
     &                    QpointStar([ str('(q2^1)*(q3^1)') ]) ]  &
     &       )                                                    &
     &    ]                                                       &
     & ),                                                         &
     & TestCase(                                                  &
     &    qpoints             = qpoints([2,3]),                   &
     &    qpoint_groups       = [ Group([1,2,3]),                 &
     &                            Group([1,3,2])  ],              &
     &    power               = 2,                                &
     &    max_qpoint_coupling = 1,                                &
     &    conserve_momentum   = .false.,                          &
     &    output              = [                                 &
     &       QpointStars(                                         &
     &          power = 0,                                        &
     &          stars = [ QpointStar([ str('()') ]) ]             &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 1,                                        &
     &          stars = [ QpointStar([ str('(q2^1)'),             &
     &                                 str('(q3^1)')  ])  ]       &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 2,                                        &
     &          stars = [ QpointStar([ str('(q2^2)'),             &
     &                                 str('(q3^2)')  ]) ]        &
     &       )                                                    &
     &    ]                                                       &
     & ),                                                         &
     & TestCase(                                                  &
     &    qpoints           = qpoints([2,3]),                     &
     &    qpoint_groups     = [ Group([1,2,3]),                   &
     &                          Group([1,3,2])  ],                &
     &    power             = 2,                                  &
     &    conserve_momentum = .true.,                             &
     &    output            = [                                   &
     &       QpointStars(                                         &
     &          power = 0,                                        &
     &          stars = [ QpointStar([ str('()') ]) ]             &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 1,                                        &
     &          stars = [ QpointStar:: ]                          &
     &       ),                                                   &
     &       QpointStars(                                         &
     &          power = 2,                                        &
     &          stars = [ QpointStar([ str('(q2^2)'),             &
     &                                 str('(q3^2)')  ]) ]        &
     &       )                                                    &
     &    ]                                                       &
     & )                                                          ]
  
  do i=1,size(test_cases)
    associate( qpoints             => test_cases(i)%qpoints,             &
             & qpoint_groups       => test_cases(i)%qpoint_groups,       &
             & power               => test_cases(i)%power,               &
             & max_qpoint_coupling => test_cases(i)%max_qpoint_coupling, &
             & conserve_momentum   => test_cases(i)%conserve_momentum,   &
             & expected_stars      => test_cases(i)%output               )
      
      stars = generate_qpoint_stars( qpoints,             &
                                   & qpoint_groups,       &
                                   & power,               &
                                   & max_qpoint_coupling, &
                                   & conserve_momentum    )
      
      message =  [ str('q-points:'),                       &
                 & str(qpoints),                           &
                 & str('q-point groups:'),                 &
                 & str(qpoint_groups, separating_line=''), &
                 & str('Power:'),                          &
                 & str(power),                             &
                 & str('Stars:'),                          &
                 & str(stars, separating_line=''),         &
                 & str('Expected stars:'),                 &
                 & str(expected_stars, separating_line='') ]
      
      check = size(stars)==size(expected_stars)
      @assertTrue(check, char(message))
      check = all(stars%power==expected_stars%power)
      @assertTrue(check, char(message))
      do j=1,size(expected_stars)
        check = size(stars(j)%stars)==size(expected_stars(j)%stars)
        @assertTrue(check, char(message))
        check = all(stars(j)%stars==expected_stars(j)%stars)
        @assertTrue(check, char(message))
      enddo
    end associate
  enddo
end subroutine
end module
