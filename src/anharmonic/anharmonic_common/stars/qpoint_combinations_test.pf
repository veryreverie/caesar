!> Tests for [[QpointCombinations(type)]].
module qpoint_combinations_test
  use funit
  
  use caesar_common_module

  use caesar_stars_module
  implicit none
contains

! Test constructor.
@test
subroutine test_QpointCombinations()
  type :: TestCase
    integer                              :: power
    type(QpointCombination), allocatable :: combinations(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(QpointCombinations) :: qpoint_combinations
  
  type(String), allocatable :: message(:)
  
  logical :: check
  
  integer :: i
  
  test_cases = [                                                        &
     & TestCase( power        = 0,                                      &
     &           combinations = [ QpointCombination(str('()')) ] ),     &
     & TestCase( power        = 1,                                      &
     &           combinations = [ QpointCombination:: ] ),              &
     & TestCase( power        = 2,                                      &
     &           combinations = [ QpointCombination(str('(q1^2)')),     &
     &                            QpointCombination(str('(q2^2)'))  ] ) ]
  
  do i=1,size(test_cases)
    associate( power        => test_cases(i)%power,       &
             & combinations => test_cases(i)%combinations )
      qpoint_combinations = QpointCombinations(power, combinations)
      
      message = [ str('power:'),        &
                & str(power),           &
                & str('combinations:'), &
                & str(combinations)     ]
      
      check = qpoint_combinations%power==power
      @assertTrue(check, char(message))
      check = size(qpoint_combinations%combinations)==size(combinations)
      @assertTrue(check, char(message))
      check = all(qpoint_combinations%combinations==combinations)
      @assertTrue(check, char(message))
    end associate
  enddo
end subroutine

@test
subroutine test_io()
  type :: TestCase
    type(QpointCombinations)  :: qpoint_combinations
    type(String), allocatable :: lines(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(QpointCombinations)  :: new_qpoint_combinations
  type(String), allocatable :: new_lines(:)
  
  logical :: check
  
  integer :: i
  
  test_cases = [                                                              &
     & TestCase( QpointCombinations(                                          &
     &              power        = 0,                                         &
     &              combinations = [ QpointCombination(str('()')) ] ),        &
     &           [ str('q-point combinations with power = 0 :'),              &
     &             str('()')                                     ]     ),     &
     & TestCase( QpointCombinations(                                          &
     &              power        = 1,                                         &
     &              combinations = [ QpointCombination:: ] ),                 &
     &           [ str('q-point combinations with power = 1 :') ] ),          &
     & TestCase( QpointCombinations(                                          &
     &              power        = 2,                                         &
     &              combinations = [ QpointCombination(str('(q1^2)')),        &
     &                               QpointCombination(str('(q2^2)'))  ] ),   &
     &           [ str('q-point combinations with power = 2 :'),              &
     &             str('(q1^2)'),                                             &
     &             str('(q2^2)')                                 ]          ) ]
  
  do i=1,size(test_cases)
    associate( qpoint_combinations => test_cases(i)%qpoint_combinations, &
             & lines               => test_cases(i)%lines                )
      new_qpoint_combinations = QpointCombinations(lines)
      check = new_qpoint_combinations%power==qpoint_combinations%power
      @assertTrue(check, char(lines))
      check = size(new_qpoint_combinations%combinations) &
         & == size(qpoint_combinations%combinations)
      @assertTrue(check, char(lines))
      check = all( new_qpoint_combinations%combinations &
              & == qpoint_combinations%combinations     )
      @assertTrue(check, char(lines))
      
      new_lines = str(qpoint_combinations)
      @assertTrue(size(new_lines)==size(lines), char(lines))
      @assertTrue(all(new_lines==lines), char(lines))
    end associate
  enddo
end subroutine

@test
subroutine test_generate_qpoint_combinations()
  type :: TestCase
    type(QpointData),         allocatable :: qpoints(:)
    integer                               :: max_power
    integer,                  allocatable :: max_qpoint_coupling
    logical,                  allocatable :: conserve_momentum
    type(QpointCombinations), allocatable :: output(:)
  end type
  
  type(QpointData),         allocatable :: qpoints(:)
  type(QpointCombinations), allocatable :: qpoint_combinations(:)
  
  type(TestCase)              :: test_case
  type(TestCase), allocatable :: test_cases(:)
  
  type(QpointCombinations), allocatable :: combinations(:)
  
  type(String), allocatable :: message(:)
  
  logical :: check
  
  integer :: i,j,k,l,ialloc
  
  qpoints = [ QpointData( FractionVector(str('   0    0    0')), 1, 1), &
            & QpointData( FractionVector(str(' 1/2    0    0')), 2, 2), &
            & QpointData( FractionVector(str('   0  1/2    0')), 3, 3), &
            & QpointData( FractionVector(str('   0    0  1/3')), 4, 5), &
            & QpointData( FractionVector(str('   0    0 -1/3')), 5, 4)  ]
  
  test_cases = [TestCase::]
  
  ! Add test cases with no non-trivial combinations.
  qpoint_combinations = [                                    &
     & QpointCombinations(                                   &
     &    power        = 0,                                  &
     &    combinations = [ QpointCombination(str('()')) ] ), &
     & QpointCombinations(                                   &
     &    power        = 1,                                  &
     &    combinations = [ QpointCombination:: ] )           ]
  
  do i=1,2
    do j=1,2
      do k=1,3
        do l=1,2
          test_case = TestCase( qpoints   = [QpointData::],         &
                              & max_power = j-1,                    &
                              & output    = qpoint_combinations(:j) )
          
          if (i==2) then
            test_case%qpoints = qpoints([1])
          endif
          
          if (k==2) then
            test_case%max_qpoint_coupling = 1
          elseif (k==3) then
            test_case%max_qpoint_coupling = 0
          endif
          
          if (l==2) then
            test_case%conserve_momentum = .false.
          elseif (l==3) then
            test_case%conserve_momentum = .true.
          endif
          
          ! Skip non-trivial cases.
          if (i==2 .and. j==2 .and. k<3) then
            cycle
          endif
          
          test_cases = [test_cases, test_case]
        enddo
      enddo
    enddo
  enddo
  
  ! Add test cases containing only q1.
  qpoint_combinations = [                                        &
     & QpointCombinations(                                       &
     &    power        = 0,                                      &
     &    combinations = [ QpointCombination(str('()')) ] ),     &
     & QpointCombinations(                                       &
     &    power        = 1,                                      &
     &    combinations = [ QpointCombination(str('(q1^1)')) ] ), &
     & QpointCombinations(                                       &
     &    power        = 2,                                      &
     &    combinations = [ QpointCombination(str('(q1^2)')) ] )  ]
  
  do i=1,2
    do j=1,3
      do k=1,3
        test_case = TestCase( qpoints   = qpoints([1]),             &
                            & max_power = i,                        &
                            & output    = qpoint_combinations(:i+1) )
        
        if (j==2) then
          test_case%max_qpoint_coupling = 1
        elseif (j==3) then
          test_case%max_qpoint_coupling = 0
          do l=2,size(test_case%output)
            test_case%output(l)%combinations = [QpointCombination::]
          enddo
        endif
        
        if (k==2) then
          test_case%conserve_momentum = .false.
        elseif (k==3) then
          test_case%conserve_momentum = .true.
        endif
        
        test_cases = [test_cases, test_case]
      enddo
    enddo
  enddo
  
  ! Add test cases for q2 and q3 without conserved momentum.
  qpoint_combinations = [                                                &
     & QpointCombinations(                                               &
     &    power        = 0,                                              &
     &    combinations = [ QpointCombination(str('()')) ] ),             &
     & QpointCombinations(                                               &
     &    power        = 1,                                              &
     &    combinations = [ QpointCombination(str('(q2^1)')),             &
     &                     QpointCombination(str('(q3^1)'))  ] ),        &
     & QpointCombinations(                                               &
     &    power        = 2,                                              &
     &    combinations = [ QpointCombination(str('(q2^2)')),             &
     &                     QpointCombination(str('(q2^1)*(q3^1)')),      &
     &                     QpointCombination(str('(q3^2)'))         ] ), &
     & QpointCombinations(                                               &
     &    power        = 2,                                              &
     &    combinations = [ QpointCombination(str('(q2^2)')),             &
     &                     QpointCombination(str('(q3^2)'))  ] )         ]
  
  test_cases = [ test_cases,                                   &
     & TestCase(                                               &
     &    qpoints             = qpoints([2,3]),                &
     &    max_power           = 1,                             &
     &    output              = qpoint_combinations(:2) ),     &
     & TestCase(                                               &
     &    qpoints             = qpoints([2,3]),                &
     &    max_power           = 2,                             &
     &    output              = qpoint_combinations(:3) ),     &
     & TestCase(                                               &
     &    qpoints             = qpoints([2,3]),                &
     &    max_power           = 2,                             &
     &    max_qpoint_coupling = 1,                             &
     &    output              = qpoint_combinations([1,2,4]) ) ]
  
  ! Add test cases for q2 and q3 with conserved momentum.
  qpoint_combinations = [                                        &
     & QpointCombinations(                                       &
     &    power        = 0,                                      &
     &    combinations = [ QpointCombination(str('()')) ] ),     &
     & QpointCombinations(                                       &
     &    power        = 1,                                      &
     &    combinations = [ QpointCombination:: ] ),              &
     & QpointCombinations(                                       &
     &    power        = 2,                                      &
     &    combinations = [ QpointCombination(str('(q2^2)')),     &
     &                     QpointCombination(str('(q3^2)'))  ] ) ]
  
  test_cases = [ test_cases,                             &
     & TestCase(                                         &
     &    qpoints           = qpoints([2,3]),            &
     &    max_power         = 1,                         &
     &    conserve_momentum = .true.,                    &
     &    output            = qpoint_combinations(:2) ), &
     & TestCase(                                         &
     &    qpoints           = qpoints([2,3]),            &
     &    max_power         = 2,                         &
     &    conserve_momentum = .true.,                    &
     &    output            = qpoint_combinations(:3) )  ]
  
  ! Add test cases for q4 and q5 without conserved momentum.
  qpoint_combinations = [                                               &
     & QpointCombinations(                                              &
     &    power        = 0,                                             &
     &    combinations = [ QpointCombination(str('()')) ] ),            &
     & QpointCombinations(                                              &
     &    power        = 1,                                             &
     &    combinations = [ QpointCombination(str('(q4^1*q5^0)')),       &
     &                     QpointCombination(str('(q4^0*q5^1)'))  ] ),  &
     & QpointCombinations(                                              &
     &    power        = 2,                                             &
     &    combinations = [ QpointCombination(str('(q4^2*q5^0)')),       &
     &                     QpointCombination(str('(q4^1*q5^1)')),       &
     &                     QpointCombination(str('(q4^0*q5^2)'))  ] )   ]
  
  test_cases = [ test_cases,                             &
     & TestCase(                                         &
     &    qpoints           = qpoints([4,5]),            &
     &    max_power         = 1,                         &
     &    output            = qpoint_combinations(:2) ), &
     & TestCase(                                         &
     &    qpoints           = qpoints([4,5]),            &
     &    max_power         = 2,                         &
     &    output            = qpoint_combinations(:3) )  ]
  
  ! Add test cases for q4 and q5 with conserved momentum.
  qpoint_combinations = [                                               &
     & QpointCombinations(                                              &
     &    power        = 0,                                             &
     &    combinations = [ QpointCombination(str('()')) ] ),            &
     & QpointCombinations(                                              &
     &    power        = 1,                                             &
     &    combinations = [ QpointCombination:: ] ),                     &
     & QpointCombinations(                                              &
     &    power        = 2,                                             &
     &    combinations = [ QpointCombination(str('(q4^1*q5^1)')) ] ),   &
     & QpointCombinations(                                              &
     &    power        = 3,                                             &
     &    combinations = [ QpointCombination(str('(q4^3*q5^0)')),       &
     &                     QpointCombination(str('(q4^0*q5^3)'))  ] )   ]
  
  test_cases = [ test_cases,                            &
     & TestCase(                                        &
     &    qpoints           = qpoints([4,5]),           &
     &    max_power         = 3,                        &
     &    conserve_momentum = .true.,                   &
     &    output            = qpoint_combinations(:4) ) ]
  
  do i=1,size(test_cases)
    associate( qpoints               => test_cases(i)%qpoints,             &
             & max_power             => test_cases(i)%max_power,           &
             & max_qpoint_coupling   => test_cases(i)%max_qpoint_coupling, &
             & conserve_momentum     => test_cases(i)%conserve_momentum,   &
             & expected_combinations => test_cases(i)%output               )
      
      combinations = generate_qpoint_combinations( qpoints,             &
                                                 & max_power,           &
                                                 & max_qpoint_coupling, &
                                                 & conserve_momentum    )
      
      message = [ str('q-points:'),              &
                & str(qpoints),                  &
                & str('Max power:'),             &
                & str(max_power)                 ]
      
      if (allocated(test_cases(i)%max_qpoint_coupling)) then
        message = [ message,                     &
                  & str('max_qpoint_coupling:'), &
                  & str(max_qpoint_coupling)     ]
      else
        message = [ message,                     &
                  & str('max_qpoint_coupling:'), &
                  & str('Not allocated')         ]
      endif
      
      if (allocated(test_cases(i)%conserve_momentum)) then
        message = [ message,                     &
                  & str('conserve_momentum:'), &
                  & str(conserve_momentum)     ]
      else
        message = [ message,                     &
                  & str('conserve_momentum:'), &
                  & str('Not allocated')         ]
      endif
      
      message = [ message,                       &
                & str('Combinations:'),          &
                & str(combinations),             &
                & str('Expected combinations:'), &
                & str(expected_combinations)     ]
      
      check = size(combinations)==size(expected_combinations)
      @assertTrue(check, char(message))
      check = all(combinations%power==expected_combinations%power)
      @assertTrue(check, char(message))
      
      do j=1,size(expected_combinations)
        associate( qpoint_combinations                         &
                 &    => combinations(j)%combinations,         &
                 & expected_qpoint_combinations                &
                 &    => expected_combinations(j)%combinations )
          check = size(qpoint_combinations) &
             & == size(expected_qpoint_combinations)
          @assertTrue(check, char(message))
          check = all( qpoint_combinations          &
                  & == expected_qpoint_combinations )
          @assertTrue(check, char(message))
          
          ! Check the output is in ascending order.
          check = all( qpoint_combinations(2:) &
                   & > qpoint_combinations(:size(qpoint_combinations)-1))
          @assertTrue(check, char(message))
        end associate
      enddo
    end associate
  enddo
end subroutine
end module
