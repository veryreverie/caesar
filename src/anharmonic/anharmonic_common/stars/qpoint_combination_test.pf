!> Tests for [[QpointCombination(type)]].
module qpoint_combination_test
  use funit

  use caesar_common_module

  use caesar_stars_module
  implicit none
contains

! Tests constructor and getter.
@test
subroutine test_QpointCombination()
  type :: TestCase
    type(QpointPower), allocatable :: qpoints(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(QpointCombination) :: combination
  
  type(String) :: message
  
  integer :: i
  
  test_cases = [ TestCase([QpointPower::]),                    &
               & TestCase([QpointPower(1,2)]),                 &
               & TestCase([QpointPower(1,2),QpointPower(3,4)]) ]
  
  do i=1,size(test_cases)
    associate(qpoints=>test_cases(i)%qpoints)
      message = 'Qpoint powers: '//join(qpoints)
      combination = QpointCombination(qpoints)
      @assertTrue(size(combination%qpoints())==size(qpoints), char(message))
      @assertTrue(all(combination%qpoints()==qpoints), char(message))
    end associate
  enddo
end subroutine

@test
subroutine test_total_power()
  type(QpointCombination) :: foo
  
  foo = QpointCombination(str('()'))
  @assertTrue(foo%total_power()==0)
  
  foo = QpointCombination(str('(q1^2)'))
  @assertTrue(foo%total_power()==2)
  
  foo = QpointCombination(str('(q2^3*q4^5)*(q6^7)'))
  @assertTrue(foo%total_power()==15)
end subroutine

@test
subroutine test_wavevector()
  type :: TestCase
    type(QpointCombination)       :: qpoint_combination
    type(QpointData), allocatable :: qpoints(:)
    type(FractionVector)          :: wavevector
  end type
  
  type(QpointData), allocatable :: test_qpoints(:)
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(FractionVector) :: wavevector
  
  type(String), allocatable :: message(:)
  
  integer :: i
  
  test_qpoints = [                                               &
     & QpointData( FractionVector(str('   0    0    0')), 1, 1), &
     & QpointData( FractionVector(str(' 1/2    0    0')), 2, 2), &
     & QpointData( FractionVector(str('   0  1/2    0')), 3, 3), &
     & QpointData( FractionVector(str('   0    0  1/2')), 4, 4), &
     & QpointData( FractionVector(str(' 1/4    0    0')), 5, 6), &
     & QpointData( FractionVector(str('-1/4    0    0')), 6, 5), &
     & QpointData( FractionVector(str('   0  1/4    0')), 7, 8), &
     & QpointData( FractionVector(str('   0 -1/4    0')), 8, 7)  ]
  
  test_cases = [                                          &
     & TestCase( QpointCombination(str('()')),            &
     &           [QpointData::],                          &
     &           FractionVector(str('0 0 0')) ),          &
     & TestCase( QpointCombination(str('()')),            &
     &           test_qpoints,                            &
     &           FractionVector(str('0 0 0')) ),          &
     & TestCase( QpointCombination(str('(q1^1)')),        &
     &           test_qpoints([1]),                       &
     &           FractionVector(str('0 0 0')) ),          &
     & TestCase( QpointCombination(str('(q2^2)*(q4^5)')), &
     &           test_qpoints([5,2,4,7]),                 &
     &           FractionVector(str('1 0 5/2')) ),        &
     & TestCase( QpointCombination(str('(q7^3*q8^2)')),   &
     &           test_qpoints([5,7,4,2]),                 &
     &           FractionVector(str('0 1/4 0')) )         ]
  
  do i=1,size(test_cases)
    associate( qpoint_combination  => test_cases(i)%qpoint_combination, &
             & qpoints             => test_cases(i)%qpoints,            &
             & expected_wavevector => test_cases(i)%wavevector          )
      wavevector = qpoint_combination%wavevector(qpoints)
      
      message = [ str('qpoint_combination:'),  &
                & str(qpoint_combination),     &
                & str('qpoints:'),             &
                & str(qpoints),                &
                & str('wavevector:'),          &
                & str(wavevector),             &
                & str('expected_wavevector:'), &
                & str(expected_wavevector)     ]
      
      @assertTrue(wavevector==expected_wavevector, char(message))
    end associate
  enddo
end subroutine

@test
subroutine test_complex_monomials()
  type :: MockComplexMode
    integer :: id
    integer :: paired_id
    integer :: qpoint_id
    integer :: paired_qpoint_id
    integer :: subspace_id
  end type
  
  type :: TestCase
    type(QpointCombination)            :: qpoint_combination
    type(MockComplexMode), allocatable :: mock_modes(:)
    type(ComplexMonomial), allocatable :: output(:)
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(ComplexMode), allocatable :: modes(:)
  
  type(ComplexMonomial), allocatable :: monomials(:)
  
  type(String), allocatable :: message(:)
  
  logical :: check
  
  integer :: i
  
  test_cases = [                                                             &
     & TestCase(                                                             &
     &    QpointCombination(str('()')),                                      &
     &    [ MockComplexMode:: ],                                             &
     &    [ ComplexMonomial(str(1)) ]                                        &
     & ),                                                                    &
     & TestCase(                                                             &
     &    QpointCombination(str('(q1^1)')),                                  &
     &    [ MockComplexMode:: ],                                             &
     &    [ ComplexMonomial:: ]                                              &
     & ),                                                                    &
     & TestCase(                                                             &
     &    QpointCombination(str('(q1^1)*(q2^1)')),                           &
     &    [ MockComplexMode(1,1,1,1,1),                                      &
     &      MockComplexMode(2,2,2,2,1)  ],                                   &
     &    [ ComplexMonomial(str('1*(u1^1)*(u2^1)')) ]                        &
     & ),                                                                    &
     & TestCase(                                                             &
     &    QpointCombination(str('(q3^2)*(q7^2)')),                           &
     &    [ MockComplexMode(1,1,3,3,1),                                      &
     &      MockComplexMode(2,2,3,3,1),                                      &
     &      MockComplexMode(3,3,7,7,1),                                      &
     &      MockComplexMode(4,4,8,8,1)  ],                                   &
     &    [ ComplexMonomial(str('1*(u1^2)*(u3^2)')),                         &
     &      ComplexMonomial(str('1*(u1^1)*(u2^1)*(u3^2)')),                  &
     &      ComplexMonomial(str('1*(u2^2)*(u3^2)'))         ]                &
     & ),                                                                    &
     & TestCase(                                                             &
     &    QpointCombination(str('(q5^1*q6^1)*(q7^1*q8^1)')),                 &
     &    [ MockComplexMode(4,6,5,6,1),                                      &
     &      MockComplexMode(5,7,5,6,1),                                      &
     &      MockComplexMode(6,4,6,5,2),                                      &
     &      MockComplexMode(7,5,6,5,2),                                      &
     &      MockComplexMode(8,9,7,8,3),                                      &
     &      MockComplexMode(9,8,8,7,3)  ],                                   &
     &    [ ComplexMonomial(str('1*(u4^1*u6^1)*(u8^1*u9^1)')),               &
     &      ComplexMonomial(str('1*(u4^1*u6^0)*(u5^0*u7^1)*(u8^1*u9^1)')),   &
     &      ComplexMonomial(str('1*(u4^0*u6^1)*(u5^1*u7^0)*(u8^1*u9^1)')),   &
     &      ComplexMonomial(str('1*(u5^1*u7^1)*(u8^1*u9^1)'))              ] &
     & )                                                                     ]
  
  do i=1,size(test_cases)
    associate( qpoint_combination => test_cases(i)%qpoint_combination, &
             & mock_modes         => test_cases(i)%mock_modes,         &
             & expected_monomials => test_cases(i)%output              )
      modes = mock_to_ComplexMode(mock_modes)
      
      monomials = qpoint_combination%complex_monomials(modes)
      
      message = [ str('qpoint_combination:'),     &
                & str(qpoint_combination),        &
                & str('modes:'),                  &
                & str(modes, separating_line=''), &
                & str('monomials:'),              &
                & str(monomials),                 &
                & str('expected_monomials:'),     &
                & str(expected_monomials)         ]
      
      check = size(monomials)==size(expected_monomials)
      @assertTrue(check, char(message))
      check = all(check_equal(monomials,expected_monomials))
      @assertTrue(check, char(message))
    end associate
  enddo
contains
  ! Convert a MockComplexMode to a ComplexMode.
  impure elemental function mock_to_ComplexMode(input) result(output)
    type(MockComplexMode), intent(in) :: input
    type(ComplexMode)                 :: output
    
    output = ComplexMode( input%id,               &
                        & input%paired_id,        &
                        & 0.0_dp,                 &
                        & 0.0_dp,                 &
                        & .false.,                &
                        & .false.,                &
                        & [ComplexVector::],      &
                        & input%qpoint_id,        &
                        & input%paired_qpoint_id, &
                        & input%subspace_id       )
  end function
  
  ! Check two complex monomials are equal (ignoring the coefficient).
  impure elemental function check_equal(this,that) result(output)
    type(ComplexMonomial), intent(in) :: this
    type(ComplexMonomial), intent(in) :: that
    logical                           :: output
    
    if (size(this)/=size(that)) then
      output = .false.
      return
    else
      output = all(this%ids()==that%ids())               &
       & .and. all(this%paired_ids()==that%paired_ids()) &
       & .and. all(this%powers()==that%powers())         &
       & .and. all(this%paired_powers()==that%paired_powers())
    endif
  end function
end subroutine

@test
subroutine test_io()
  type :: TestCase
    type(QpointCombination) :: combination
    type(String)            :: line
  end type
  
  type(TestCase), allocatable :: test_cases(:)
  
  type(String) :: message(2)
  
  integer :: i
  
  test_cases = [ TestCase( QpointCombination([QpointPower::]),              &
               &           str('()')                           ),           &
               & TestCase( QpointCombination([QpointPower(1,2)]),           &
               &           str('(q1^2)')                          ),        &
               & TestCase( QpointCombination([QpointPower(1,2,3,4)]),       &
               &           str('(q1^2*q3^4)')                         ),    &
               & TestCase( QpointCombination([ QpointPower(1,2),            &
               &                               QpointPower(3,4)  ]),        &
               &           str('(q1^2)*(q3^4)')                      ),     &
               & TestCase( QpointCombination([ QpointPower(1,2,3,4),        &
               &                               QpointPower(5,6)      ]),    &
               &           str('(q1^2*q3^4)*(q5^6)')                     ), &
               & TestCase( QpointCombination([ QpointPower(1,2),            &
               &                               QpointPower(3,4,5,6) ]),     &
               &           str('(q1^2)*(q3^4*q5^6)')                    ),  &
               & TestCase( QpointCombination([ QpointPower(1,2,3,4),        &
               &                               QpointPower(5,6,7,8)  ]),    &
               &           str('(q1^2*q3^4)*(q5^6*q7^8)')                )  ]
  
  do i=1,size(test_cases)
    associate( combination=>test_cases(i)%combination, &
             & line=>test_cases(i)%line)
      message = [ 'Combination : '//combination, &
                & 'Line        : '//line         ]
      @assertTrue(str(combination)==line, char(message))
      @assertTrue(QpointCombination(line)==combination, char(message))
    end associate
  enddo
end subroutine

@test
subroutine test_comparison
  type(QpointCombination), allocatable :: combinations(:)
  
  type(String) :: message(2)
  
  integer :: i,j
  
  ! An array of q-point combinations in ascending order.
  combinations = [ QpointCombination(str('()')),                 &
                 & QpointCombination(str('(q1^1)')),             &
                 & QpointCombination(str('(q2^1*q3^0)')),        &
                 & QpointCombination(str('(q2^0*q3^1)')),        &
                 & QpointCombination(str('(q1^2)')),             &
                 & QpointCombination(str('(q1^1)*(q2^1*q3^0)')), &
                 & QpointCombination(str('(q1^1)*(q2^0*q3^1)')), &
                 & QpointCombination(str('(q2^2*q3^0)')),        &
                 & QpointCombination(str('(q2^1*q3^1)')),        &
                 & QpointCombination(str('(q2^0*q3^2)'))         ]
  
  do i=1,size(combinations)
    do j=1,size(combinations)
      associate( lhs=>combinations(i), &
               & rhs=>combinations(j)  )
        message = [ 'lhs: '//lhs, &
                  & 'rhs: '//rhs  ]
        if (i<j) then
          @assertFalse(lhs==rhs, char(message))
          @assertTrue(lhs/=rhs, char(message))
          @assertTrue(lhs<rhs, char(message))
          @assertTrue(lhs<=rhs, char(message))
          @assertFalse(lhs>rhs, char(message))
          @assertFalse(lhs>=rhs, char(message))
        elseif (i==j) then
          @assertTrue(lhs==rhs, char(message))
          @assertFalse(lhs/=rhs, char(message))
          @assertFalse(lhs<rhs, char(message))
          @assertTrue(lhs<=rhs, char(message))
          @assertFalse(lhs>rhs, char(message))
          @assertTrue(lhs>=rhs, char(message))
        elseif (i>j) then
          @assertFalse(lhs==rhs, char(message))
          @assertTrue(lhs/=rhs, char(message))
          @assertFalse(lhs<rhs, char(message))
          @assertFalse(lhs<=rhs, char(message))
          @assertTrue(lhs>rhs, char(message))
          @assertTrue(lhs>=rhs, char(message))
        endif
      end associate
    enddo
  enddo
end subroutine

@test
subroutine test_conjg()
  logical :: check
  
  check = conjg(QpointCombination(str('()'))) &
     & == QpointCombination(str('()'))
  @assertTrue(check)
  
  check = conjg(QpointCombination(str('(q1^2)'))) &
     & == QpointCombination(str('(q1^2)'))
  @assertTrue(check)
  
  check = conjg(QpointCombination(str('(q1^2*q2^3)'))) &
     & == QpointCombination(str('(q1^3*q2^2)'))
  @assertTrue(check)
  
  check = conjg(QpointCombination(str('(q1^2*q2^3)*(q3^1*q4^2)'))) &
     & == QpointCombination(str('(q1^3*q2^2)*(q3^2*q4^1)'))
  @assertTrue(check)
end subroutine

@test
subroutine test_operate()
  logical :: check
  
  check = Group([integer::]) * QpointCombination(str('()')) &
     & == QpointCombination(str('()'))
  @assertTrue(check)
  
  check = Group([1,2,3]) * QpointCombination(str('()')) &
     & == QpointCombination(str('()'))
  @assertTrue(check)
  
  check = Group([1]) * QpointCombination(str('(q1^2)')) &
     & == QpointCombination(str('(q1^2)'))
  @assertTrue(check)
  
  check = Group([2,1]) * QpointCombination(str('(q1^3)')) &
     & == QpointCombination(str('(q2^3)'))
  @assertTrue(check)
  
  check = Group([1,2]) * QpointCombination(str('(q1^3)*(q2^4)')) &
     & == QpointCombination(str('(q1^3)*(q2^4)'))
  @assertTrue(check)
  
  check = Group([2,1]) * QpointCombination(str('(q1^3)*(q2^4)')) &
     & == QpointCombination(str('(q1^4)*(q2^3)'))
  @assertTrue(check)
  
  check = Group([3,4,2,1])                                  &
     &  * QpointCombination(str('(q1^1*q2^2)*(q3^3*q4^4)')) &
     & == QpointCombination(str('(q1^4*q2^3)*(q3^1*q4^2)'))
end subroutine
end module
