name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: export compiler version variables
      run: >
        export CMAKE_COMPILER_FLAGS="
          -DCMAKE_C_COMPILER:path=gcc-10
          -DCMAKE_CXX_COMPILER:path=g++-10
          -DCMAKE_Fortran_COMPILER:path=gfortran-10"
    
    # Install pFUnit.
    - name: Cache pFUnit
      id: cache-pfunit
      uses: actions/cache@v2
      with:
        path: pfunit_install
        key: ${{ runner.os }}-pfunit
    
    - name: Clone pFUnit
      if: steps.cache-pfunit.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}
      run: |
        git clone https://github.com/Goddard-Fortran-Ecosystem/pFUnit.git pfunit
    
    - name: Make pFUnit build and install directories
      if: steps.cache-pfunit.outputs.cache-hit != 'true'
      run: |
        cmake -E make_directory ${{github.workspace}}/pfunit/build
        cmake -E make_directory ${{github.workspace}}/pfunit_install
    
    - name: Make pFUnit
      if: steps.cache-pfunit.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/pfunit/build
      run: |
        cmake .. \
          $CMAKE_COMPILER_FLAGS \
          -DSKIP_MPI:logical=true \
          -DSKIP_OPENMP:logical=true \
          -DSKIP_FHAMCREST:logical=true \
          -DSKIP_ESMF:logical=true
        make tests
        make DESTDIR=${{github.workspace}}/pfunit_install install
    
    # Install spglib.
    - name: Cache spglib
      id: cache-spglib
      uses: actions/cache@v2
      with:
        path: spglib_install
        key: ${{ runner.os }}-spglib
    
    - name: Clone spglib
      if: steps.cache-spglib.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}
      run: |
        git clone https://github.com/spglib/spglib.git spglib

    - name: Make spglib build and install directories
      if: steps.cache-spglib.outputs.cache-hit != 'true'
      run: |
        cmake -E make_directory ${{github.workspace}}/spglib/build
        cmake -E make_directory ${{github.workspace}}/spglib_install
    
    - name: Make spglib
      if: steps.cache-spglib.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/spglib/build
      run: |
        cmake .. -DCMAKE_INSTALL_PREFIX="" $CMAKE_COMPILER_FLAGS
        make
        make DESTDIR=${{github.workspace}}/spglib_install install
    
    # Install Caesar.
    - name: Make Caesar build directory
      run: |
        cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        pfunit_flags=""
        for pfunit_lib in PFUNIT GFTL GFTL_SHARED; do
          pfunit_dir=$(find ${{github.workspace}}/pfunit_install \
            -name "${pfunit_lib}Config.cmake" | xargs -I{} dirname {})
          pfunit_flags="${pfunit_flags} -D${pfunit_lib}_DIR:path=${pfunit_dir}"
        done
        export PATH="${{github.workspace}}/spglib_install/include:$PATH"
        export LIB="${{github.workspace}}/spglib_install/lib:$LIB"
        cmake $GITHUB_WORKSPACE/src \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          $pfunit_flags \
          -DCORRECT_COUNTER_BUG:logical=true \
          $CMAKE_COMPILER_FLAGS

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.
      # You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
