CAESAR

----------------------------------------
Installation
----------------------------------------
To install Caesar, run:

  cmake path
  make

This should be run from the directory where cmake should be built.
'path' should be the path to the CAESAR/src/ directory.
The executable 'caesar' will be placed in a 'bin' directory.

Caesar requires the library 'spglib'. This must be on the library path in order for compilation to succeed.

The compiler can be specified using the flag -DCMAKE_Fortran_COMPILER, e.g.

  cmake path -DCMAKE_Fortran_COMPILER:PATH=gfortran
  cmake path -DCMAKE_Fortran_COMPILER:PATH=ifort
  cmake path -DCMAKE_Fortran_COMPILER:PATH=nagfor
  cmake path -DCMAKE_Fortran_COMPILER:PATH=pgfortran

Caesar has been tested with the following compiler versions:

gfortran 5.4.0
nagfor 6.2 (release 6207)

There is a known gfortran bug affecting shared counters. To test for this bug, call 'caesar check_counter'. If this bug is present, the behaviour can be corrected by setting the CMake variable CORRECT_COUNTER_BUG (e.g. by using the command line arguments -DCORRECT_COUNTER_BUG:LOGICAL=true).

----------------------------------------
BLAS/LAPACK
----------------------------------------
By default Caesar will use CMake's find_package(LAPACK) to search for a BLAS/LAPACK distribution.

If multiple distributions are present, the specific distribution can be selected using the CMake variables BLAS_DIR, BLA_VENDOR and LAPACK_DIR.

For build systems where BLAS/LAPACK are bundled with the compiler and do not need finding separately (e.g. when using the Cray Compiler Environment) the BLAS/LAPACK finder can be disabled by setting the CMake variable FIND_LAPACK to false (e.g. by using the command line argument -DFIND_LAPACK:LOGICAL=false).

----------------------------------------
Quip
----------------------------------------
Caesar can be linked against Quip. This is acheived by specifying

  -DPATH_TO_QUIP=quipdir

where quipdir is the Quip directory containing libatoms and libquip.

N.B. Quip requires atomic numbers, which are read from .cell files as the label on the atomic species, so e.g. titanium must be written as Ti:22.

----------------------------------------
Running
----------------------------------------
For help, call

  caesar -h

----------------------------------------
Inputs
----------------------------------------
Caesar can be given arguments on the command line, from a file or interactively, as explained in the helptext provided by calling caesar -h.
Caesar also requires an input file, and at present only CASTEP .cell files are supported. This .cell file must include a lattice block, an atomic positions block, and a species mass block. This .cell file should be in the working directory specified when Caesar is called.

Arguments have the same names and syntax regardless of how they are supplied, so e.g. a 3x3x3 q-point grid can be specified on the command line as:

  caesar setup_harmonic --q-point_grid 3 3 3

or in a file, by calling:

  caesar setup_harmonic -f filename

and adding the following line to the file:

  q-point_grid 3 3 3

or interactively, as:

  caesar setup_harmonic -i

and inputing "3 3 3" when prompted.

In Caesar input files, blank lines are ignored.
'!' is a comment character, and everything after this up to the end of the line will be ignored.
The keyword is taken to be the first non-whitespace string on each line, ending at the next whitespace. Everything else on the line, up to any comment characters, is taken to be the argument of that keyword.
e.g. the line 'key word a b c' will parse as the keyword 'key' followed by the argument 'word a b c'
For certain keywords, the argument is optional.
An error will be thrown if any unrecognised keywords are found, or if a keyword appears more than once from the same source (command line / file). Command line options override file options where both are present.
A file containing the used values of each option will be produced at the start of each Caesar run. This file can be used as the input settings if the calculation is repeated.
An example input file can be found in doc/input_files.

In order to calculate energies, Caesar requires a run script. This script will be called repeatedly from the working directory, and will be passed a number of arguments on the command line each time it is called.
The return code of the run script will be echoed to the output of Caesar after each run.
An example run script can be found in doc/input_files.

----------------------------------------
Documentation
----------------------------------------
html documentation can be generated using either Doxygen or Ford. Both should be run from the doc directory. Doxygen documentation can be generated by running

doxygen caesar.Doxyfile

and Ford documentation can be generated by running

ford caesar.md

----------------------------------------
Visualisation
----------------------------------------
Caesar uses python and the matplotlib plotting library. This can be located using the python_path keyword when running plot functionality.

The harmonic calculation produces a castep .phonon file, which can be viewed using JMol or similar.
